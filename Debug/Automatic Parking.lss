
Automatic Parking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000294  00800200  000020d2  00002166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800494  00800494  000023fa  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000061a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea9  00000000  00000000  00006248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ad  00000000  00000000  000080f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cf  00000000  00000000  0000849e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  00008d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007be  00000000  00000000  0000937c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ff  00000000  00000000  00009b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000ae39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_5>
      18:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <angle_rotate+0x3c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	14 e0       	ldi	r17, 0x04	; 4
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e2 ed       	ldi	r30, 0xD2	; 210
     17e:	f0 e2       	ldi	r31, 0x20	; 32
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a4 39       	cpi	r26, 0x94	; 148
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	15 e0       	ldi	r17, 0x05	; 5
     192:	a4 e9       	ldi	r26, 0x94	; 148
     194:	b4 e0       	ldi	r27, 0x04	; 4
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ac 32       	cpi	r26, 0x2C	; 44
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <main>
     1a4:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x4>
     1b4:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_set_4bit+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8

	
}
     230:	08 95       	ret

00000232 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_wr_command+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_wr_command+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_command+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_command+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <lcd_init>:
     27c:	86 e6       	ldi	r24, 0x66	; 102
     27e:	9e e0       	ldi	r25, 0x0E	; 14
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x4>
     284:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     286:	88 e2       	ldi	r24, 0x28	; 40
     288:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x01);
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x06);
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x0E);
     298:	8e e0       	ldi	r24, 0x0E	; 14
     29a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x80);
     29e:	80 e8       	ldi	r24, 0x80	; 128
     2a0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
		
}
     2a4:	08 95       	ret

000002a6 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2a6:	98 b1       	in	r25, 0x08	; 8
     2a8:	9f 70       	andi	r25, 0x0F	; 15
     2aa:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2ac:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2ae:	28 2f       	mov	r18, r24
     2b0:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b2:	92 2b       	or	r25, r18
     2b4:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2b6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2b8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2ba:	42 9a       	sbi	0x08, 2	; 8
     2bc:	ef ef       	ldi	r30, 0xFF	; 255
     2be:	f7 e4       	ldi	r31, 0x47	; 71
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_wr_char+0x1a>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_wr_char+0x20>
     2c6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2c8:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ca:	98 b1       	in	r25, 0x08	; 8
     2cc:	9f 70       	andi	r25, 0x0F	; 15
     2ce:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d0:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d2:	82 95       	swap	r24
     2d4:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2d6:	89 2b       	or	r24, r25
     2d8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2da:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2dc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2de:	42 9a       	sbi	0x08, 2	; 8
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	97 e4       	ldi	r25, 0x47	; 71
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_wr_char+0x3e>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_wr_char+0x44>
     2ea:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2ec:	42 98       	cbi	0x08, 2	; 8
}
     2ee:	08 95       	ret

000002f0 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
     2f6:	08 95       	ret

000002f8 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ec 01       	movw	r28, r24
	while(*str != '\0')
     2fe:	88 81       	ld	r24, Y
     300:	88 23       	and	r24, r24
     302:	31 f0       	breq	.+12     	; 0x310 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
     304:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     306:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     30a:	89 91       	ld	r24, Y+
     30c:	88 23       	and	r24, r24
     30e:	d9 f7       	brne	.-10     	; 0x306 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	79 f0       	breq	.+30     	; 0x338 <lcd_cursor+0x22>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	18 f4       	brcc	.+6      	; 0x324 <lcd_cursor+0xe>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	c9 f4       	brne	.+50     	; 0x354 <lcd_cursor+0x3e>
     322:	05 c0       	rjmp	.+10     	; 0x32e <lcd_cursor+0x18>
     324:	83 30       	cpi	r24, 0x03	; 3
     326:	69 f0       	breq	.+26     	; 0x342 <lcd_cursor+0x2c>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	a1 f4       	brne	.+40     	; 0x354 <lcd_cursor+0x3e>
     32c:	0f c0       	rjmp	.+30     	; 0x34c <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     32e:	86 2f       	mov	r24, r22
     330:	81 58       	subi	r24, 0x81	; 129
     332:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     336:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     338:	86 2f       	mov	r24, r22
     33a:	81 54       	subi	r24, 0x41	; 65
     33c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     340:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     342:	86 2f       	mov	r24, r22
     344:	8d 56       	subi	r24, 0x6D	; 109
     346:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     34a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     34c:	86 2f       	mov	r24, r22
     34e:	8d 52       	subi	r24, 0x2D	; 45
     350:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     354:	08 95       	ret

00000356 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	8a 01       	movw	r16, r20
     360:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     362:	88 23       	and	r24, r24
     364:	11 f0       	breq	.+4      	; 0x36a <lcd_print+0x14>
     366:	66 23       	and	r22, r22
     368:	19 f4       	brne	.+6      	; 0x370 <lcd_print+0x1a>
	{
		lcd_home();
     36a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_home>
     36e:	02 c0       	rjmp	.+4      	; 0x374 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     370:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     374:	c5 30       	cpi	r28, 0x05	; 5
     376:	d1 05       	cpc	r29, r1
     378:	71 f4       	brne	.+28     	; 0x396 <lcd_print+0x40>
	{
		million=value/10000+48;
     37a:	c8 01       	movw	r24, r16
     37c:	60 e1       	ldi	r22, 0x10	; 16
     37e:	77 e2       	ldi	r23, 0x27	; 39
     380:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
     384:	cb 01       	movw	r24, r22
     386:	c0 96       	adiw	r24, 0x30	; 48
     388:	90 93 f0 04 	sts	0x04F0, r25
     38c:	80 93 ef 04 	sts	0x04EF, r24
		lcd_wr_char(million);
     390:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
     394:	03 c0       	rjmp	.+6      	; 0x39c <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     396:	c4 30       	cpi	r28, 0x04	; 4
     398:	d1 05       	cpc	r29, r1
     39a:	b9 f4       	brne	.+46     	; 0x3ca <lcd_print+0x74>
	{
		temp = value/1000;
     39c:	c8 01       	movw	r24, r16
     39e:	68 ee       	ldi	r22, 0xE8	; 232
     3a0:	73 e0       	ldi	r23, 0x03	; 3
     3a2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
     3a6:	cb 01       	movw	r24, r22
     3a8:	70 93 f4 04 	sts	0x04F4, r23
     3ac:	60 93 f3 04 	sts	0x04F3, r22
		thousand = temp%10 + 48;
     3b0:	6a e0       	ldi	r22, 0x0A	; 10
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
     3b8:	c0 96       	adiw	r24, 0x30	; 48
     3ba:	90 93 2b 05 	sts	0x052B, r25
     3be:	80 93 2a 05 	sts	0x052A, r24
		lcd_wr_char(thousand);
     3c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <lcd_print+0x76>
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ca:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3cc:	c3 30       	cpi	r28, 0x03	; 3
     3ce:	d1 05       	cpc	r29, r1
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <lcd_print+0x80>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	b1 f4       	brne	.+44     	; 0x402 <lcd_print+0xac>
	{
		temp = value/100;
     3d6:	c8 01       	movw	r24, r16
     3d8:	64 e6       	ldi	r22, 0x64	; 100
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
     3e0:	cb 01       	movw	r24, r22
     3e2:	70 93 f4 04 	sts	0x04F4, r23
     3e6:	60 93 f3 04 	sts	0x04F3, r22
		hundred = temp%10 + 48;
     3ea:	6a e0       	ldi	r22, 0x0A	; 10
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
     3f2:	c0 96       	adiw	r24, 0x30	; 48
     3f4:	90 93 27 05 	sts	0x0527, r25
     3f8:	80 93 26 05 	sts	0x0526, r24
		lcd_wr_char(hundred);
     3fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     400:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     402:	c2 30       	cpi	r28, 0x02	; 2
     404:	d1 05       	cpc	r29, r1
     406:	11 f0       	breq	.+4      	; 0x40c <lcd_print+0xb6>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	b1 f4       	brne	.+44     	; 0x438 <lcd_print+0xe2>
	{
		temp = value/10;
     40c:	2a e0       	ldi	r18, 0x0A	; 10
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	c8 01       	movw	r24, r16
     412:	b9 01       	movw	r22, r18
     414:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
     418:	cb 01       	movw	r24, r22
     41a:	70 93 f4 04 	sts	0x04F4, r23
     41e:	60 93 f3 04 	sts	0x04F3, r22
		tens = temp%10 + 48;
     422:	b9 01       	movw	r22, r18
     424:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
     428:	c0 96       	adiw	r24, 0x30	; 48
     42a:	90 93 21 05 	sts	0x0521, r25
     42e:	80 93 20 05 	sts	0x0520, r24
		lcd_wr_char(tens);
     432:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     436:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     438:	c1 30       	cpi	r28, 0x01	; 1
     43a:	d1 05       	cpc	r29, r1
     43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0xec>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	61 f4       	brne	.+24     	; 0x45a <lcd_print+0x104>
	{
		unit = value%10 + 48;
     442:	c8 01       	movw	r24, r16
     444:	6a e0       	ldi	r22, 0x0A	; 10
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
     44c:	c0 96       	adiw	r24, 0x30	; 48
     44e:	90 93 29 05 	sts	0x0529, r25
     452:	80 93 28 05 	sts	0x0528, r24
		lcd_wr_char(unit);
     456:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
	}
	if(digits>5)
     45a:	c6 30       	cpi	r28, 0x06	; 6
     45c:	d1 05       	cpc	r29, r1
     45e:	1c f0       	brlt	.+6      	; 0x466 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     460:	85 e4       	ldi	r24, 0x45	; 69
     462:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
	}
	
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	08 95       	ret

00000470 <base_servo_pin_config>:
extern int strike_pos;

//Configure PORTB 5 pin for servo motor 1 operation
void base_servo_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     470:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     472:	2d 9a       	sbi	0x05, 5	; 5
}
     474:	08 95       	ret

00000476 <strike_servo_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void strike_servo_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     476:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     478:	2e 9a       	sbi	0x05, 6	; 5
}
     47a:	08 95       	ret

0000047c <timer1_init>:
//pre-scale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     47c:	e1 e8       	ldi	r30, 0x81	; 129
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     482:	8c ef       	ldi	r24, 0xFC	; 252
     484:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     49a:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     49e:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     4a2:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     4a6:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     4aa:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     4ae:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     4b2:	8b ea       	ldi	r24, 0xAB	; 171
     4b4:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     4b8:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     4bc:	8c e0       	ldi	r24, 0x0C	; 12
     4be:	80 83       	st	Z, r24
}
     4c0:	08 95       	ret

000004c2 <base_servo>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void base_servo(unsigned char degrees)  
{
 float PositionPanServo = 0;
 PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     4c2:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void base_servo(unsigned char degrees)  
{
 float PositionPanServo = 0;
 PositionPanServo = ((float)degrees / 1.86) + 35.0;
     4c6:	68 2f       	mov	r22, r24
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatunsisf>
     4d2:	2b e7       	ldi	r18, 0x7B	; 123
     4d4:	34 e1       	ldi	r19, 0x14	; 20
     4d6:	4e ee       	ldi	r20, 0xEE	; 238
     4d8:	5f e3       	ldi	r21, 0x3F	; 63
     4da:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divsf3>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	4c e0       	ldi	r20, 0x0C	; 12
     4e4:	52 e4       	ldi	r21, 0x42	; 66
     4e6:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__addsf3>
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
     4ea:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fixunssfsi>
     4ee:	60 93 88 00 	sts	0x0088, r22
}
     4f2:	08 95       	ret

000004f4 <strike_servo>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void strike_servo(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     4f4:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void strike_servo(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     4f8:	68 2f       	mov	r22, r24
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatunsisf>
     504:	2b e7       	ldi	r18, 0x7B	; 123
     506:	34 e1       	ldi	r19, 0x14	; 20
     508:	4e ee       	ldi	r20, 0xEE	; 238
     50a:	5f e3       	ldi	r21, 0x3F	; 63
     50c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divsf3>
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	4c e0       	ldi	r20, 0x0C	; 12
     516:	52 e4       	ldi	r21, 0x42	; 66
     518:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__addsf3>
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
     51c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fixunssfsi>
     520:	60 93 8a 00 	sts	0x008A, r22
}
     524:	08 95       	ret

00000526 <servo_base_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_base_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	80 93 88 00 	sts	0x0088, r24
}
     532:	08 95       	ret

00000534 <servo_strike_free>:

void servo_strike_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     534:	83 e0       	ldi	r24, 0x03	; 3
     536:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	80 93 8a 00 	sts	0x008A, r24
}
     540:	08 95       	ret

00000542 <strike_rotate>:

void strike_rotate(int deg)
{
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
	
	if(deg < strike_pos)
     548:	80 91 80 04 	lds	r24, 0x0480
     54c:	90 91 81 04 	lds	r25, 0x0481
     550:	c8 17       	cp	r28, r24
     552:	d9 07       	cpc	r29, r25
     554:	ac f4       	brge	.+42     	; 0x580 <strike_rotate+0x3e>
	{
		while(strike_pos != deg)
		{
			strike_servo(strike_pos);
     556:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <strike_servo>
			strike_pos--;
     55a:	80 91 80 04 	lds	r24, 0x0480
     55e:	90 91 81 04 	lds	r25, 0x0481
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	90 93 81 04 	sts	0x0481, r25
     568:	80 93 80 04 	sts	0x0480, r24
     56c:	ec ec       	ldi	r30, 0xCC	; 204
     56e:	f4 e6       	ldi	r31, 0x64	; 100
     570:	31 97       	sbiw	r30, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <strike_rotate+0x2e>
     574:	00 c0       	rjmp	.+0      	; 0x576 <strike_rotate+0x34>
     576:	00 00       	nop
void strike_rotate(int deg)
{
	
	if(deg < strike_pos)
	{
		while(strike_pos != deg)
     578:	8c 17       	cp	r24, r28
     57a:	9d 07       	cpc	r25, r29
     57c:	61 f7       	brne	.-40     	; 0x556 <strike_rotate+0x14>
     57e:	17 c0       	rjmp	.+46     	; 0x5ae <strike_rotate+0x6c>
			strike_pos--;
			_delay_ms(7);
		}
	}
	
	else if(deg > strike_pos)
     580:	8c 17       	cp	r24, r28
     582:	9d 07       	cpc	r25, r29
     584:	a4 f4       	brge	.+40     	; 0x5ae <strike_rotate+0x6c>
	{
		while(strike_pos != deg)
		{
			strike_servo(strike_pos);
     586:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <strike_servo>
			strike_pos++;
     58a:	80 91 80 04 	lds	r24, 0x0480
     58e:	90 91 81 04 	lds	r25, 0x0481
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	90 93 81 04 	sts	0x0481, r25
     598:	80 93 80 04 	sts	0x0480, r24
     59c:	ec ec       	ldi	r30, 0xCC	; 204
     59e:	f4 e6       	ldi	r31, 0x64	; 100
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <strike_rotate+0x5e>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <strike_rotate+0x64>
     5a6:	00 00       	nop
		}
	}
	
	else if(deg > strike_pos)
	{
		while(strike_pos != deg)
     5a8:	8c 17       	cp	r24, r28
     5aa:	9d 07       	cpc	r25, r29
     5ac:	61 f7       	brne	.-40     	; 0x586 <strike_rotate+0x44>
			strike_servo(strike_pos);
			strike_pos++;
			_delay_ms(7);
		}			
	}
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <base_rotate>:

void base_rotate(int deg)
{
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
	
	if(deg < base_pos)
     5ba:	80 91 82 04 	lds	r24, 0x0482
     5be:	90 91 83 04 	lds	r25, 0x0483
     5c2:	c8 17       	cp	r28, r24
     5c4:	d9 07       	cpc	r29, r25
     5c6:	ac f4       	brge	.+42     	; 0x5f2 <base_rotate+0x3e>
	{
		while(base_pos != deg)
		{
			base_servo(base_pos);
     5c8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <base_servo>
			base_pos--;			
     5cc:	80 91 82 04 	lds	r24, 0x0482
     5d0:	90 91 83 04 	lds	r25, 0x0483
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	90 93 83 04 	sts	0x0483, r25
     5da:	80 93 82 04 	sts	0x0482, r24
     5de:	ec ec       	ldi	r30, 0xCC	; 204
     5e0:	f4 e6       	ldi	r31, 0x64	; 100
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <base_rotate+0x2e>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <base_rotate+0x34>
     5e8:	00 00       	nop
void base_rotate(int deg)
{
	
	if(deg < base_pos)
	{
		while(base_pos != deg)
     5ea:	8c 17       	cp	r24, r28
     5ec:	9d 07       	cpc	r25, r29
     5ee:	61 f7       	brne	.-40     	; 0x5c8 <base_rotate+0x14>
     5f0:	17 c0       	rjmp	.+46     	; 0x620 <base_rotate+0x6c>
			base_pos--;			
			_delay_ms(7);
		}
	}
	
	else if(deg > base_pos)
     5f2:	8c 17       	cp	r24, r28
     5f4:	9d 07       	cpc	r25, r29
     5f6:	a4 f4       	brge	.+40     	; 0x620 <base_rotate+0x6c>
	{
		while(base_pos != deg)
		{
			base_servo(base_pos);
     5f8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <base_servo>
			base_pos++;		
     5fc:	80 91 82 04 	lds	r24, 0x0482
     600:	90 91 83 04 	lds	r25, 0x0483
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	90 93 83 04 	sts	0x0483, r25
     60a:	80 93 82 04 	sts	0x0482, r24
     60e:	ec ec       	ldi	r30, 0xCC	; 204
     610:	f4 e6       	ldi	r31, 0x64	; 100
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <base_rotate+0x5e>
     616:	00 c0       	rjmp	.+0      	; 0x618 <base_rotate+0x64>
     618:	00 00       	nop
		}
	}
	
	else if(deg > base_pos)
	{
		while(base_pos != deg)
     61a:	8c 17       	cp	r24, r28
     61c:	9d 07       	cpc	r25, r29
     61e:	61 f7       	brne	.-40     	; 0x5f8 <base_rotate+0x44>
			base_servo(base_pos);
			base_pos++;		
			_delay_ms(7);
		}
	}
} 
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     626:	87 b1       	in	r24, 0x07	; 7
     628:	87 6f       	ori	r24, 0xF7	; 247
     62a:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     62c:	88 b1       	in	r24, 0x08	; 8
     62e:	80 78       	andi	r24, 0x80	; 128
     630:	88 b9       	out	0x08, r24	; 8
}
     632:	08 95       	ret

00000634 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     634:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     636:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     638:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     63c:	10 92 08 01 	sts	0x0108, r1
}
     640:	08 95       	ret

00000642 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     642:	81 b1       	in	r24, 0x01	; 1
     644:	8f 60       	ori	r24, 0x0F	; 15
     646:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     648:	82 b1       	in	r24, 0x02	; 2
     64a:	80 7f       	andi	r24, 0xF0	; 240
     64c:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     64e:	ea e0       	ldi	r30, 0x0A	; 10
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	80 81       	ld	r24, Z
     654:	88 61       	ori	r24, 0x18	; 24
     656:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     658:	eb e0       	ldi	r30, 0x0B	; 11
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	80 81       	ld	r24, Z
     65e:	88 61       	ori	r24, 0x18	; 24
     660:	80 83       	st	Z, r24
}
     662:	08 95       	ret

00000664 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     664:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     666:	74 9a       	sbi	0x0e, 4	; 14
}
     668:	08 95       	ret

0000066a <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     66a:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     66c:	75 9a       	sbi	0x0e, 5	; 14
}
     66e:	08 95       	ret

00000670 <buzzer_pin_config>:

void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;			//Setting PORTC 3 as output
     670:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     672:	43 98       	cbi	0x08, 3	; 8
}
     674:	08 95       	ret

00000676 <left_position_encoder_interrupt_init>:

 //Interrupt 4 enable
void left_position_encoder_interrupt_init (void)
{
	cli();						//Clears the global interrupt
     676:	f8 94       	cli
	EICRB = EICRB | 0x02;		// INT4 is set to trigger with falling edge
     678:	ea e6       	ldi	r30, 0x6A	; 106
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	82 60       	ori	r24, 0x02	; 2
     680:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10;		// Enable Interrupt INT4 for left position encoder
     682:	ec 9a       	sbi	0x1d, 4	; 29
	sei();						// Enables the global interrupt
     684:	78 94       	sei
}
     686:	08 95       	ret

00000688 <right_position_encoder_interrupt_init>:

 //Interrupt 5 enable
void right_position_encoder_interrupt_init (void)
{
	cli();						//Clears the global interrupt
     688:	f8 94       	cli
	EICRB = EICRB | 0x08;		// INT5 is set to trigger with falling edge
     68a:	ea e6       	ldi	r30, 0x6A	; 106
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	88 60       	ori	r24, 0x08	; 8
     692:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20;		// Enable Interrupt INT5 for right position encoder
     694:	ed 9a       	sbi	0x1d, 5	; 29
	sei();						// Enables the global interrupt
     696:	78 94       	sei
}
     698:	08 95       	ret

0000069a <__vector_6>:
//ISR for right position encoder
ISR(INT5_vect)
{
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     6ac:	80 91 94 04 	lds	r24, 0x0494
     6b0:	90 91 95 04 	lds	r25, 0x0495
     6b4:	a0 91 96 04 	lds	r26, 0x0496
     6b8:	b0 91 97 04 	lds	r27, 0x0497
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	a1 1d       	adc	r26, r1
     6c0:	b1 1d       	adc	r27, r1
     6c2:	80 93 94 04 	sts	0x0494, r24
     6c6:	90 93 95 04 	sts	0x0495, r25
     6ca:	a0 93 96 04 	sts	0x0496, r26
     6ce:	b0 93 97 04 	sts	0x0497, r27
}
     6d2:	bf 91       	pop	r27
     6d4:	af 91       	pop	r26
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	1f 90       	pop	r1
     6e2:	18 95       	reti

000006e4 <__vector_5>:
//ISR for left position encoder
ISR(INT4_vect)
{
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     6f6:	80 91 98 04 	lds	r24, 0x0498
     6fa:	90 91 99 04 	lds	r25, 0x0499
     6fe:	a0 91 9a 04 	lds	r26, 0x049A
     702:	b0 91 9b 04 	lds	r27, 0x049B
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	a1 1d       	adc	r26, r1
     70a:	b1 1d       	adc	r27, r1
     70c:	80 93 98 04 	sts	0x0498, r24
     710:	90 93 99 04 	sts	0x0499, r25
     714:	a0 93 9a 04 	sts	0x049A, r26
     718:	b0 93 9b 04 	sts	0x049B, r27
}
     71c:	bf 91       	pop	r27
     71e:	af 91       	pop	r26
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <uart0_init>:
// char size: 8 bit
// parity: Disabled
*/
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     72e:	e1 ec       	ldi	r30, 0xC1	; 193
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     734:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     738:	86 e0       	ldi	r24, 0x06	; 6
     73a:	80 93 c2 00 	sts	0x00C2, r24
	//UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hz set baud rate lo
     73e:	8f e5       	ldi	r24, 0x5F	; 95
     740:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     744:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     748:	88 e9       	ldi	r24, 0x98	; 152
     74a:	80 83       	st	Z, r24
}
     74c:	08 95       	ret

0000074e <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
     74e:	e1 ed       	ldi	r30, 0xD1	; 209
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	10 82       	st	Z, r1
	UCSR2A = 0x00;
     754:	10 92 d0 00 	sts	0x00D0, r1
	UCSR2C = 0x06;
     758:	86 e0       	ldi	r24, 0x06	; 6
     75a:	80 93 d2 00 	sts	0x00D2, r24
	UBRR2L = 0x5F; //set baud rate lo
     75e:	8f e5       	ldi	r24, 0x5F	; 95
     760:	80 93 d4 00 	sts	0x00D4, r24
	UBRR2H = 0x00; //set baud rate hi
     764:	10 92 d5 00 	sts	0x00D5, r1
	UCSR2B = 0x98;
     768:	88 e9       	ldi	r24, 0x98	; 152
     76a:	80 83       	st	Z, r24
}
     76c:	08 95       	ret

0000076e <__vector_25>:

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	0b b6       	in	r0, 0x3b	; 59
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	8f 93       	push	r24
     77e:	9f 93       	push	r25
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
	char data = UDR0;//making copy of data from UDR2 in 'data' variable
     784:	e6 ec       	ldi	r30, 0xC6	; 198
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
	UDR0 = data;
     78a:	80 83       	st	Z, r24
	
	slaveData[slaveDataIndex] = data;  //store the received data in int array
     78c:	e0 91 a2 04 	lds	r30, 0x04A2
     790:	f0 91 a3 04 	lds	r31, 0x04A3
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	ec 55       	subi	r30, 0x5C	; 92
     79c:	fb 4f       	sbci	r31, 0xFB	; 251
     79e:	91 83       	std	Z+1, r25	; 0x01
     7a0:	80 83       	st	Z, r24

	if(slaveData[slaveDataIndex] == 'A')  // Slave is sending distance to next note
     7a2:	e0 91 a2 04 	lds	r30, 0x04A2
     7a6:	f0 91 a3 04 	lds	r31, 0x04A3
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	ec 55       	subi	r30, 0x5C	; 92
     7b0:	fb 4f       	sbci	r31, 0xFB	; 251
     7b2:	80 81       	ld	r24, Z
     7b4:	91 81       	ldd	r25, Z+1	; 0x01
     7b6:	81 34       	cpi	r24, 0x41	; 65
     7b8:	91 05       	cpc	r25, r1
     7ba:	61 f4       	brne	.+24     	; 0x7d4 <__vector_25+0x66>
	{
		SlotFive = 1;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	90 93 de 04 	sts	0x04DE, r25
     7c4:	80 93 dd 04 	sts	0x04DD, r24
		slaveDataIndex = -1; //reset index of rescue data array to -1 so next when it receives data it will store from 0th position
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	9f ef       	ldi	r25, 0xFF	; 255
     7cc:	90 93 a3 04 	sts	0x04A3, r25
     7d0:	80 93 a2 04 	sts	0x04A2, r24
		//-1 because at the end of the ISR rescueDataIndex is getting incremented so it will become 0 automatically
	}
	if(slaveData[slaveDataIndex] == 'B')
     7d4:	e0 91 a2 04 	lds	r30, 0x04A2
     7d8:	f0 91 a3 04 	lds	r31, 0x04A3
     7dc:	ee 0f       	add	r30, r30
     7de:	ff 1f       	adc	r31, r31
     7e0:	ec 55       	subi	r30, 0x5C	; 92
     7e2:	fb 4f       	sbci	r31, 0xFB	; 251
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	82 34       	cpi	r24, 0x42	; 66
     7ea:	91 05       	cpc	r25, r1
     7ec:	61 f4       	brne	.+24     	; 0x806 <__vector_25+0x98>
	{
		SlotNine = 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	90 93 dc 04 	sts	0x04DC, r25
     7f6:	80 93 db 04 	sts	0x04DB, r24
		slaveDataIndex = -1;
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	9f ef       	ldi	r25, 0xFF	; 255
     7fe:	90 93 a3 04 	sts	0x04A3, r25
     802:	80 93 a2 04 	sts	0x04A2, r24
	}
	if(slaveData[slaveDataIndex] == 'C')  // Slave is sending distance to next note
     806:	e0 91 a2 04 	lds	r30, 0x04A2
     80a:	f0 91 a3 04 	lds	r31, 0x04A3
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	ec 55       	subi	r30, 0x5C	; 92
     814:	fb 4f       	sbci	r31, 0xFB	; 251
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	83 34       	cpi	r24, 0x43	; 67
     81c:	91 05       	cpc	r25, r1
     81e:	61 f4       	brne	.+24     	; 0x838 <__vector_25+0xca>
	{
		SlotThirteen =1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 da 04 	sts	0x04DA, r25
     828:	80 93 d9 04 	sts	0x04D9, r24
		slaveDataIndex = -1;
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	9f ef       	ldi	r25, 0xFF	; 255
     830:	90 93 a3 04 	sts	0x04A3, r25
     834:	80 93 a2 04 	sts	0x04A2, r24
	}
	
	slaveDataIndex++; //increment the rescueDataIndex after receiving packet
     838:	80 91 a2 04 	lds	r24, 0x04A2
     83c:	90 91 a3 04 	lds	r25, 0x04A3
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	90 93 a3 04 	sts	0x04A3, r25
     846:	80 93 a2 04 	sts	0x04A2, r24
	
}
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	9f 91       	pop	r25
     850:	8f 91       	pop	r24
     852:	0f 90       	pop	r0
     854:	0b be       	out	0x3b, r0	; 59
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibble for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     860:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibble to 0
     862:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibble for the protection
     864:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibble to 0
	PortARestore |= Direction; // adding lower nibble for forward command and restoring the PORTA status
     866:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     868:	92 b9       	out	0x02, r25	; 2
}
     86a:	08 95       	ret

0000086c <forward>:

//Both wheels forward
void forward (void) 
{
	motion_set(0x06);
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     872:	08 95       	ret

00000874 <back>:

//Both wheels backward
void back (void)
{
	motion_set(0x09);
     874:	89 e0       	ldi	r24, 0x09	; 9
     876:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     87a:	08 95       	ret

0000087c <left>:

//Left wheel backward, Right wheel forward
void left (void) 
{
	motion_set(0x05);
     87c:	85 e0       	ldi	r24, 0x05	; 5
     87e:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     882:	08 95       	ret

00000884 <right>:

//Left wheel forward, Right wheel backward
void right (void) 
{
	motion_set(0x0A);
     884:	8a e0       	ldi	r24, 0x0A	; 10
     886:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     88a:	08 95       	ret

0000088c <soft_right>:

//Left wheel forward, Right wheel stationary
void soft_right(void)
{
	motion_set(0x02);
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     892:	08 95       	ret

00000894 <soft_left>:

//Right wheel forward, Left wheel stationary
void soft_left()
{
	motion_set(0x04);
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     89a:	08 95       	ret

0000089c <stop>:
//stops the both wheels
void stop (void)
{
	motion_set(0x00);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     8a2:	08 95       	ret

000008a4 <Sharp_GP2D12_estimation>:

// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor.
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     8a8:	68 2f       	mov	r22, r24
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatunsisf>
     8b4:	2f ee       	ldi	r18, 0xEF	; 239
     8b6:	39 ec       	ldi	r19, 0xC9	; 201
     8b8:	43 e9       	ldi	r20, 0x93	; 147
     8ba:	5f e3       	ldi	r21, 0x3F	; 63
     8bc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <pow>
     8c0:	b6 2f       	mov	r27, r22
     8c2:	a7 2f       	mov	r26, r23
     8c4:	38 2f       	mov	r19, r24
     8c6:	29 2f       	mov	r18, r25
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	80 e8       	ldi	r24, 0x80	; 128
     8ce:	9f e3       	ldi	r25, 0x3F	; 63
     8d0:	42 2f       	mov	r20, r18
     8d2:	0b 2f       	mov	r16, r27
     8d4:	1a 2f       	mov	r17, r26
     8d6:	23 2f       	mov	r18, r19
     8d8:	34 2f       	mov	r19, r20
     8da:	a9 01       	movw	r20, r18
     8dc:	98 01       	movw	r18, r16
     8de:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divsf3>
     8e2:	2a e9       	ldi	r18, 0x9A	; 154
     8e4:	39 ef       	ldi	r19, 0xF9	; 249
     8e6:	4e e2       	ldi	r20, 0x2E	; 46
     8e8:	55 e4       	ldi	r21, 0x45	; 69
     8ea:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e2       	ldi	r20, 0x20	; 32
     8f4:	51 e4       	ldi	r21, 0x41	; 65
     8f6:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     8fa:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fixsfsi>
     8fe:	88 27       	eor	r24, r24
     900:	77 fd       	sbrc	r23, 7
     902:	80 95       	com	r24
     904:	98 2f       	mov	r25, r24
     906:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__floatsisf>
	distanceInt = (int)distance;
     90a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     90e:	86 2f       	mov	r24, r22
     910:	97 2f       	mov	r25, r23
     912:	23 e0       	ldi	r18, 0x03	; 3
     914:	81 32       	cpi	r24, 0x21	; 33
     916:	92 07       	cpc	r25, r18
     918:	10 f0       	brcs	.+4      	; 0x91e <Sharp_GP2D12_estimation+0x7a>
     91a:	80 e2       	ldi	r24, 0x20	; 32
     91c:	93 e0       	ldi	r25, 0x03	; 3
}
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     92a:	bc 01       	movw	r22, r24
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatunsisf>
     934:	28 e4       	ldi	r18, 0x48	; 72
     936:	31 ee       	ldi	r19, 0xE1	; 225
     938:	42 e8       	ldi	r20, 0x82	; 130
     93a:	50 e4       	ldi	r21, 0x40	; 64
     93c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     940:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fixunssfsi>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     94c:	10 92 94 04 	sts	0x0494, r1
     950:	10 92 95 04 	sts	0x0495, r1
     954:	10 92 96 04 	sts	0x0496, r1
     958:	10 92 97 04 	sts	0x0497, r1
	ShaftCountLeft = 0;
     95c:	10 92 98 04 	sts	0x0498, r1
     960:	10 92 99 04 	sts	0x0499, r1
     964:	10 92 9a 04 	sts	0x049A, r1
     968:	10 92 9b 04 	sts	0x049B, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     96c:	f1 e0       	ldi	r31, 0x01	; 1
     96e:	c0 e0       	ldi	r28, 0x00	; 0
     970:	40 91 94 04 	lds	r20, 0x0494
     974:	50 91 95 04 	lds	r21, 0x0495
     978:	60 91 96 04 	lds	r22, 0x0496
     97c:	70 91 97 04 	lds	r23, 0x0497
     980:	00 91 98 04 	lds	r16, 0x0498
     984:	10 91 99 04 	lds	r17, 0x0499
     988:	20 91 9a 04 	lds	r18, 0x049A
     98c:	30 91 9b 04 	lds	r19, 0x049B
     990:	ef 2f       	mov	r30, r31
     992:	48 17       	cp	r20, r24
     994:	59 07       	cpc	r21, r25
     996:	6a 07       	cpc	r22, r26
     998:	7b 07       	cpc	r23, r27
     99a:	08 f4       	brcc	.+2      	; 0x99e <angle_rotate+0x7a>
     99c:	ec 2f       	mov	r30, r28
     99e:	ee 23       	and	r30, r30
     9a0:	49 f4       	brne	.+18     	; 0x9b4 <angle_rotate+0x90>
     9a2:	4f 2f       	mov	r20, r31
     9a4:	08 17       	cp	r16, r24
     9a6:	19 07       	cpc	r17, r25
     9a8:	2a 07       	cpc	r18, r26
     9aa:	3b 07       	cpc	r19, r27
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <angle_rotate+0x8c>
     9ae:	4c 2f       	mov	r20, r28
     9b0:	44 23       	and	r20, r20
     9b2:	f1 f2       	breq	.-68     	; 0x970 <angle_rotate+0x4c>
			break;
	}
	//stop(); //Stop robot
}
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	08 95       	ret

000009bc <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     9bc:	bc 01       	movw	r22, r24
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatunsisf>
     9c6:	25 ee       	ldi	r18, 0xE5	; 229
     9c8:	30 ed       	ldi	r19, 0xD0	; 208
     9ca:	4a ea       	ldi	r20, 0xAA	; 170
     9cc:	50 e4       	ldi	r21, 0x40	; 64
     9ce:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     9d2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fixunssfsi>
     9d6:	46 2f       	mov	r20, r22
     9d8:	57 2f       	mov	r21, r23
     9da:	68 2f       	mov	r22, r24
     9dc:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     9de:	10 92 94 04 	sts	0x0494, r1
     9e2:	10 92 95 04 	sts	0x0495, r1
     9e6:	10 92 96 04 	sts	0x0496, r1
     9ea:	10 92 97 04 	sts	0x0497, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     9ee:	80 91 94 04 	lds	r24, 0x0494
     9f2:	90 91 95 04 	lds	r25, 0x0495
     9f6:	a0 91 96 04 	lds	r26, 0x0496
     9fa:	b0 91 97 04 	lds	r27, 0x0497
     9fe:	48 17       	cp	r20, r24
     a00:	59 07       	cpc	r21, r25
     a02:	6a 07       	cpc	r22, r26
     a04:	7b 07       	cpc	r23, r27
     a06:	98 f7       	brcc	.-26     	; 0x9ee <linear_distance_mm+0x32>
		{
			break;
		}
	}
	//stop(); //Stop robot
}
     a08:	08 95       	ret

00000a0a <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
	forward();
     a10:	0e 94 36 04 	call	0x86c	; 0x86c <forward>
	linear_distance_mm(DistanceInMM);
     a14:	ce 01       	movw	r24, r28
     a16:	0e 94 de 04 	call	0x9bc	; 0x9bc <linear_distance_mm>
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <backward_mm>:

void backward_mm(unsigned int DistanceInMM)
{
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ec 01       	movw	r28, r24
	back();
     a26:	0e 94 3a 04 	call	0x874	; 0x874 <back>
	linear_distance_mm(DistanceInMM);
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 de 04 	call	0x9bc	; 0x9bc <linear_distance_mm>
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     a3c:	0e 94 3e 04 	call	0x87c	; 0x87c <left>
	angle_rotate(Degrees);
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 92 04 	call	0x924	; 0x924 <angle_rotate>
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <right_degrees>:

void right_degrees(unsigned int Degrees)
{
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     a52:	0e 94 42 04 	call	0x884	; 0x884 <right>
	angle_rotate(Degrees);
     a56:	ce 01       	movw	r24, r28
     a58:	0e 94 92 04 	call	0x924	; 0x924 <angle_rotate>
}
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <port_init>:

//Function to Initialize PORTS
void port_init()
{
	motion_pin_config();			//robot motion pins config
     a62:	0e 94 21 03 	call	0x642	; 0x642 <motion_pin_config>
	left_encoder_pin_config();		//left encoder pin config
     a66:	0e 94 32 03 	call	0x664	; 0x664 <left_encoder_pin_config>
	right_encoder_pin_config();	    //right encoder pin config
     a6a:	0e 94 35 03 	call	0x66a	; 0x66a <right_encoder_pin_config>
	buzzer_pin_config();			//buzzer pin config
     a6e:	0e 94 38 03 	call	0x670	; 0x670 <buzzer_pin_config>
	lcd_port_config();				//lcd pin config
     a72:	0e 94 13 03 	call	0x626	; 0x626 <lcd_port_config>
	adc_pin_config();				//adc pin config
     a76:	0e 94 1a 03 	call	0x634	; 0x634 <adc_pin_config>
	base_servo_pin_config();
     a7a:	0e 94 38 02 	call	0x470	; 0x470 <base_servo_pin_config>
	strike_servo_pin_config();
     a7e:	0e 94 3b 02 	call	0x476	; 0x476 <strike_servo_pin_config>
}
     a82:	08 95       	ret

00000a84 <timer5_init>:
// Pre-scale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     a84:	e1 e2       	ldi	r30, 0x21	; 33
     a86:	f1 e0       	ldi	r31, 0x01	; 1
     a88:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     a96:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     a9a:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     a9e:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     aa2:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     aa6:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     aaa:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     aae:	89 ea       	ldi	r24, 0xA9	; 169
     ab0:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     ab4:	8b e0       	ldi	r24, 0x0B	; 11
     ab6:	80 83       	st	Z, r24
}
     ab8:	08 95       	ret

00000aba <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     aba:	ea e7       	ldi	r30, 0x7A	; 122
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     ac0:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     ac4:	80 e2       	ldi	r24, 0x20	; 32
     ac6:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     ace:	86 e8       	ldi	r24, 0x86	; 134
     ad0:	80 83       	st	Z, r24
}
     ad2:	08 95       	ret

00000ad4 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     ad4:	88 30       	cpi	r24, 0x08	; 8
     ad6:	18 f0       	brcs	.+6      	; 0xade <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     ad8:	98 e0       	ldi	r25, 0x08	; 8
     ada:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     ade:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     ae0:	80 62       	ori	r24, 0x20	; 32
     ae2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     ae6:	ea e7       	ldi	r30, 0x7A	; 122
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	80 64       	ori	r24, 0x40	; 64
     aee:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     af0:	80 81       	ld	r24, Z
     af2:	84 ff       	sbrs	r24, 4
     af4:	fd cf       	rjmp	.-6      	; 0xaf0 <ADC_Conversion+0x1c>
	a=ADCH;
     af6:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     afa:	ea e7       	ldi	r30, 0x7A	; 122
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	90 81       	ld	r25, Z
     b00:	90 61       	ori	r25, 0x10	; 16
     b02:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     b04:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     b08:	08 95       	ret

00000b0a <print_sensor>:

//Function To Print Sensor Values At Desired Row And Column Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	d8 2f       	mov	r29, r24
     b10:	c6 2f       	mov	r28, r22
     b12:	84 2f       	mov	r24, r20
	int line_follow;	
	ADC_Value = ADC_Conversion(channel);
     b14:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
     b18:	48 2f       	mov	r20, r24
     b1a:	80 93 1d 05 	sts	0x051D, r24
	lcd_print(row, coloumn, ADC_Value, 3);//change
     b1e:	8d 2f       	mov	r24, r29
     b20:	6c 2f       	mov	r22, r28
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	23 e0       	ldi	r18, 0x03	; 3
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b32:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     b36:	60 93 2a 01 	sts	0x012A, r22
}
     b3a:	08 95       	ret

00000b3c <init_devices>:

//Initialize the devices
void init_devices (void)
{
 	cli(); //Clears the global interrupts
     b3c:	f8 94       	cli
	port_init();
     b3e:	0e 94 31 05 	call	0xa62	; 0xa62 <port_init>
	adc_init();
     b42:	0e 94 5d 05 	call	0xaba	; 0xaba <adc_init>
	timer5_init();
     b46:	0e 94 42 05 	call	0xa84	; 0xa84 <timer5_init>
	timer1_init();
     b4a:	0e 94 3e 02 	call	0x47c	; 0x47c <timer1_init>
	uart0_init();
     b4e:	0e 94 97 03 	call	0x72e	; 0x72e <uart0_init>
	uart2_init();
     b52:	0e 94 a7 03 	call	0x74e	; 0x74e <uart2_init>
	left_position_encoder_interrupt_init();
     b56:	0e 94 3b 03 	call	0x676	; 0x676 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     b5a:	0e 94 44 03 	call	0x688	; 0x688 <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
     b5e:	78 94       	sei
}
     b60:	08 95       	ret

00000b62 <buzzer_on>:

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     b62:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     b64:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     b66:	88 b9       	out	0x08, r24	; 8
}
     b68:	08 95       	ret

00000b6a <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     b6a:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     b6c:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     b6e:	88 b9       	out	0x08, r24	; 8
}
     b70:	08 95       	ret

00000b72 <turn_left>:

//Function to turn bot left
void turn_left(unsigned int deg)
{
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	ec 01       	movw	r28, r24
	velocity(200, 200);
     b78:	88 ec       	ldi	r24, 0xC8	; 200
     b7a:	68 ec       	ldi	r22, 0xC8	; 200
     b7c:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
	left_degrees(deg); //turn left by degree specified
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 1b 05 	call	0xa36	; 0xa36 <left_degrees>
	Center_white_line = ADC_Conversion(2); //take readings of white line sensor
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
     b8c:	80 93 b1 04 	sts	0x04B1, r24
	while (Center_white_line <= threshold)
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	20 91 8c 04 	lds	r18, 0x048C
     b96:	30 91 8d 04 	lds	r19, 0x048D
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	7c f0       	brlt	.+30     	; 0xbbe <turn_left+0x4c>
	{
		left();
     ba0:	0e 94 3e 04 	call	0x87c	; 0x87c <left>
		Center_white_line = ADC_Conversion(2);
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
     baa:	80 93 b1 04 	sts	0x04B1, r24
void turn_left(unsigned int deg)
{
	velocity(200, 200);
	left_degrees(deg); //turn left by degree specified
	Center_white_line = ADC_Conversion(2); //take readings of white line sensor
	while (Center_white_line <= threshold)
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	20 91 8c 04 	lds	r18, 0x048C
     bb4:	30 91 8d 04 	lds	r19, 0x048D
     bb8:	28 17       	cp	r18, r24
     bba:	39 07       	cpc	r19, r25
     bbc:	8c f7       	brge	.-30     	; 0xba0 <turn_left+0x2e>
     bbe:	82 e3       	ldi	r24, 0x32	; 50
     bc0:	93 eb       	ldi	r25, 0xB3	; 179
     bc2:	a2 e0       	ldi	r26, 0x02	; 2
     bc4:	81 50       	subi	r24, 0x01	; 1
     bc6:	90 40       	sbci	r25, 0x00	; 0
     bc8:	a0 40       	sbci	r26, 0x00	; 0
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <turn_left+0x52>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <turn_left+0x5c>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <turn_left+0x5e>
	{
		left();
		Center_white_line = ADC_Conversion(2);
	}
	_delay_ms(60); //wait for some time
	stop(); //stop after turning left
     bd0:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <turn_right>:

//Function to turn bot right
void turn_right(unsigned int deg)
{
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ec 01       	movw	r28, r24
	velocity(200, 200);
     be0:	88 ec       	ldi	r24, 0xC8	; 200
     be2:	68 ec       	ldi	r22, 0xC8	; 200
     be4:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
	right_degrees(deg); //turn right by degree specified
     be8:	ce 01       	movw	r24, r28
     bea:	0e 94 26 05 	call	0xa4c	; 0xa4c <right_degrees>
	Center_white_line = ADC_Conversion(2); //take readings of white line sensor
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
     bf4:	80 93 b1 04 	sts	0x04B1, r24
	while (Center_white_line <= threshold)
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	20 91 8c 04 	lds	r18, 0x048C
     bfe:	30 91 8d 04 	lds	r19, 0x048D
     c02:	28 17       	cp	r18, r24
     c04:	39 07       	cpc	r19, r25
     c06:	7c f0       	brlt	.+30     	; 0xc26 <turn_right+0x4c>
	{
		right();
     c08:	0e 94 42 04 	call	0x884	; 0x884 <right>
		Center_white_line = ADC_Conversion(2);
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
     c12:	80 93 b1 04 	sts	0x04B1, r24
void turn_right(unsigned int deg)
{
	velocity(200, 200);
	right_degrees(deg); //turn right by degree specified
	Center_white_line = ADC_Conversion(2); //take readings of white line sensor
	while (Center_white_line <= threshold)
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	20 91 8c 04 	lds	r18, 0x048C
     c1c:	30 91 8d 04 	lds	r19, 0x048D
     c20:	28 17       	cp	r18, r24
     c22:	39 07       	cpc	r19, r25
     c24:	8c f7       	brge	.-30     	; 0xc08 <turn_right+0x2e>
     c26:	82 e3       	ldi	r24, 0x32	; 50
     c28:	93 eb       	ldi	r25, 0xB3	; 179
     c2a:	a2 e0       	ldi	r26, 0x02	; 2
     c2c:	81 50       	subi	r24, 0x01	; 1
     c2e:	90 40       	sbci	r25, 0x00	; 0
     c30:	a0 40       	sbci	r26, 0x00	; 0
     c32:	e1 f7       	brne	.-8      	; 0xc2c <turn_right+0x52>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <turn_right+0x5c>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <turn_right+0x5e>
	{
		right();
		Center_white_line = ADC_Conversion(2);
	}
	_delay_ms(60); //wait for some time
	stop(); //stop after turning right
     c38:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <east>:
 * Example Call: east(direction);
 *
 */
void east(unsigned int previous_direction) 
{ 
    if (previous_direction == point_west) 
     c42:	20 91 92 04 	lds	r18, 0x0492
     c46:	30 91 93 04 	lds	r19, 0x0493
     c4a:	28 17       	cp	r18, r24
     c4c:	39 07       	cpc	r19, r25
     c4e:	89 f4       	brne	.+34     	; 0xc72 <east+0x30>
	{    
		velocity(200,200);
     c50:	88 ec       	ldi	r24, 0xC8	; 200
     c52:	68 ec       	ldi	r22, 0xC8	; 200
     c54:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
	    turn_left(full_turn);//180 degree turn
     c58:	80 91 84 04 	lds	r24, 0x0484
     c5c:	90 91 85 04 	lds	r25, 0x0485
     c60:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
		turn_info = 1800;
     c64:	88 e0       	ldi	r24, 0x08	; 8
     c66:	97 e0       	ldi	r25, 0x07	; 7
     c68:	90 93 e8 04 	sts	0x04E8, r25
     c6c:	80 93 e7 04 	sts	0x04E7, r24
     c70:	3b c0       	rjmp	.+118    	; 0xce8 <east+0xa6>
    } 
	else if (previous_direction == point_north) 
     c72:	20 91 90 04 	lds	r18, 0x0490
     c76:	30 91 91 04 	lds	r19, 0x0491
     c7a:	28 17       	cp	r18, r24
     c7c:	39 07       	cpc	r19, r25
     c7e:	89 f4       	brne	.+34     	; 0xca2 <east+0x60>
	{ 
		velocity(200,200);
     c80:	88 ec       	ldi	r24, 0xC8	; 200
     c82:	68 ec       	ldi	r22, 0xC8	; 200
     c84:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
        turn_right(half_turn);//Right
     c88:	80 91 86 04 	lds	r24, 0x0486
     c8c:	90 91 87 04 	lds	r25, 0x0487
     c90:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
		turn_info = 901;     
     c94:	85 e8       	ldi	r24, 0x85	; 133
     c96:	93 e0       	ldi	r25, 0x03	; 3
     c98:	90 93 e8 04 	sts	0x04E8, r25
     c9c:	80 93 e7 04 	sts	0x04E7, r24
     ca0:	23 c0       	rjmp	.+70     	; 0xce8 <east+0xa6>
	}    
	else if (previous_direction == point_south)
     ca2:	20 91 8e 04 	lds	r18, 0x048E
     ca6:	30 91 8f 04 	lds	r19, 0x048F
     caa:	28 17       	cp	r18, r24
     cac:	39 07       	cpc	r19, r25
     cae:	89 f4       	brne	.+34     	; 0xcd2 <east+0x90>
	{
		velocity(200,200);
     cb0:	88 ec       	ldi	r24, 0xC8	; 200
     cb2:	68 ec       	ldi	r22, 0xC8	; 200
     cb4:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
		turn_left(half_turn);//Left
     cb8:	80 91 86 04 	lds	r24, 0x0486
     cbc:	90 91 87 04 	lds	r25, 0x0487
     cc0:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
		turn_info = 902;
     cc4:	86 e8       	ldi	r24, 0x86	; 134
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	90 93 e8 04 	sts	0x04E8, r25
     ccc:	80 93 e7 04 	sts	0x04E7, r24
     cd0:	0b c0       	rjmp	.+22     	; 0xce8 <east+0xa6>
	}
	else if (previous_direction == point_east)
     cd2:	20 91 e1 04 	lds	r18, 0x04E1
     cd6:	30 91 e2 04 	lds	r19, 0x04E2
     cda:	28 17       	cp	r18, r24
     cdc:	39 07       	cpc	r19, r25
     cde:	21 f4       	brne	.+8      	; 0xce8 <east+0xa6>
	{
		turn_info = 0;
     ce0:	10 92 e8 04 	sts	0x04E8, r1
     ce4:	10 92 e7 04 	sts	0x04E7, r1
	}
	
    direction = point_east;
     ce8:	80 91 e1 04 	lds	r24, 0x04E1
     cec:	90 91 e2 04 	lds	r25, 0x04E2
     cf0:	90 93 e0 04 	sts	0x04E0, r25
     cf4:	80 93 df 04 	sts	0x04DF, r24
}
     cf8:	08 95       	ret

00000cfa <west>:
 * Example Call: west(direction);
 *
 */
void west(unsigned int previous_direction) 
{ 
    if (previous_direction == point_east) 
     cfa:	20 91 e1 04 	lds	r18, 0x04E1
     cfe:	30 91 e2 04 	lds	r19, 0x04E2
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	89 f4       	brne	.+34     	; 0xd2a <west+0x30>
	{    
		velocity(200,200);
     d08:	88 ec       	ldi	r24, 0xC8	; 200
     d0a:	68 ec       	ldi	r22, 0xC8	; 200
     d0c:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
	    turn_left(full_turn);//180 degree turn
     d10:	80 91 84 04 	lds	r24, 0x0484
     d14:	90 91 85 04 	lds	r25, 0x0485
     d18:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
		turn_info = 1800;
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	97 e0       	ldi	r25, 0x07	; 7
     d20:	90 93 e8 04 	sts	0x04E8, r25
     d24:	80 93 e7 04 	sts	0x04E7, r24
     d28:	3b c0       	rjmp	.+118    	; 0xda0 <west+0xa6>
    } 
	else if (previous_direction == point_south) 
     d2a:	20 91 8e 04 	lds	r18, 0x048E
     d2e:	30 91 8f 04 	lds	r19, 0x048F
     d32:	28 17       	cp	r18, r24
     d34:	39 07       	cpc	r19, r25
     d36:	89 f4       	brne	.+34     	; 0xd5a <west+0x60>
	{ 
		velocity(200,200);
     d38:	88 ec       	ldi	r24, 0xC8	; 200
     d3a:	68 ec       	ldi	r22, 0xC8	; 200
     d3c:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
        turn_right(half_turn);//Right
     d40:	80 91 86 04 	lds	r24, 0x0486
     d44:	90 91 87 04 	lds	r25, 0x0487
     d48:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
		turn_info = 901;     
     d4c:	85 e8       	ldi	r24, 0x85	; 133
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	90 93 e8 04 	sts	0x04E8, r25
     d54:	80 93 e7 04 	sts	0x04E7, r24
     d58:	23 c0       	rjmp	.+70     	; 0xda0 <west+0xa6>
	}    
	else if (previous_direction == point_north)
     d5a:	20 91 90 04 	lds	r18, 0x0490
     d5e:	30 91 91 04 	lds	r19, 0x0491
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	89 f4       	brne	.+34     	; 0xd8a <west+0x90>
	{
		velocity(200,200);
     d68:	88 ec       	ldi	r24, 0xC8	; 200
     d6a:	68 ec       	ldi	r22, 0xC8	; 200
     d6c:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
		turn_left(half_turn);//Left
     d70:	80 91 86 04 	lds	r24, 0x0486
     d74:	90 91 87 04 	lds	r25, 0x0487
     d78:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
		turn_info = 902;
     d7c:	86 e8       	ldi	r24, 0x86	; 134
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	90 93 e8 04 	sts	0x04E8, r25
     d84:	80 93 e7 04 	sts	0x04E7, r24
     d88:	0b c0       	rjmp	.+22     	; 0xda0 <west+0xa6>
	}
	else if (previous_direction == point_west)
     d8a:	20 91 92 04 	lds	r18, 0x0492
     d8e:	30 91 93 04 	lds	r19, 0x0493
     d92:	28 17       	cp	r18, r24
     d94:	39 07       	cpc	r19, r25
     d96:	21 f4       	brne	.+8      	; 0xda0 <west+0xa6>
	{
		turn_info = 0;
     d98:	10 92 e8 04 	sts	0x04E8, r1
     d9c:	10 92 e7 04 	sts	0x04E7, r1
	}
	
    direction = point_west;
     da0:	80 91 92 04 	lds	r24, 0x0492
     da4:	90 91 93 04 	lds	r25, 0x0493
     da8:	90 93 e0 04 	sts	0x04E0, r25
     dac:	80 93 df 04 	sts	0x04DF, r24
}
     db0:	08 95       	ret

00000db2 <north>:
 * Example Call: north(direction);
 *
 */
void north(unsigned int previous_direction) 
{ 
    if (previous_direction == point_south) 
     db2:	20 91 8e 04 	lds	r18, 0x048E
     db6:	30 91 8f 04 	lds	r19, 0x048F
     dba:	28 17       	cp	r18, r24
     dbc:	39 07       	cpc	r19, r25
     dbe:	89 f4       	brne	.+34     	; 0xde2 <north+0x30>
	{    
		velocity(200,200);
     dc0:	88 ec       	ldi	r24, 0xC8	; 200
     dc2:	68 ec       	ldi	r22, 0xC8	; 200
     dc4:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
	    turn_left(full_turn);//180 degree turn
     dc8:	80 91 84 04 	lds	r24, 0x0484
     dcc:	90 91 85 04 	lds	r25, 0x0485
     dd0:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
		turn_info = 1800;
     dd4:	88 e0       	ldi	r24, 0x08	; 8
     dd6:	97 e0       	ldi	r25, 0x07	; 7
     dd8:	90 93 e8 04 	sts	0x04E8, r25
     ddc:	80 93 e7 04 	sts	0x04E7, r24
     de0:	3b c0       	rjmp	.+118    	; 0xe58 <north+0xa6>
    } 
	else if (previous_direction == point_west) 
     de2:	20 91 92 04 	lds	r18, 0x0492
     de6:	30 91 93 04 	lds	r19, 0x0493
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	89 f4       	brne	.+34     	; 0xe12 <north+0x60>
	{ 
		velocity(200,200);
     df0:	88 ec       	ldi	r24, 0xC8	; 200
     df2:	68 ec       	ldi	r22, 0xC8	; 200
     df4:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
        turn_right(half_turn);//Right
     df8:	80 91 86 04 	lds	r24, 0x0486
     dfc:	90 91 87 04 	lds	r25, 0x0487
     e00:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
		turn_info = 901;     
     e04:	85 e8       	ldi	r24, 0x85	; 133
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	90 93 e8 04 	sts	0x04E8, r25
     e0c:	80 93 e7 04 	sts	0x04E7, r24
     e10:	23 c0       	rjmp	.+70     	; 0xe58 <north+0xa6>
	}    
	else if (previous_direction == point_east)
     e12:	20 91 e1 04 	lds	r18, 0x04E1
     e16:	30 91 e2 04 	lds	r19, 0x04E2
     e1a:	28 17       	cp	r18, r24
     e1c:	39 07       	cpc	r19, r25
     e1e:	89 f4       	brne	.+34     	; 0xe42 <north+0x90>
	{
		velocity(200,200);
     e20:	88 ec       	ldi	r24, 0xC8	; 200
     e22:	68 ec       	ldi	r22, 0xC8	; 200
     e24:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
		turn_left(half_turn);//Left
     e28:	80 91 86 04 	lds	r24, 0x0486
     e2c:	90 91 87 04 	lds	r25, 0x0487
     e30:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
		turn_info = 902;
     e34:	86 e8       	ldi	r24, 0x86	; 134
     e36:	93 e0       	ldi	r25, 0x03	; 3
     e38:	90 93 e8 04 	sts	0x04E8, r25
     e3c:	80 93 e7 04 	sts	0x04E7, r24
     e40:	0b c0       	rjmp	.+22     	; 0xe58 <north+0xa6>
	}
	else if (previous_direction == point_north)
     e42:	20 91 90 04 	lds	r18, 0x0490
     e46:	30 91 91 04 	lds	r19, 0x0491
     e4a:	28 17       	cp	r18, r24
     e4c:	39 07       	cpc	r19, r25
     e4e:	21 f4       	brne	.+8      	; 0xe58 <north+0xa6>
	{
		turn_info = 0;
     e50:	10 92 e8 04 	sts	0x04E8, r1
     e54:	10 92 e7 04 	sts	0x04E7, r1
	}
	
    direction = point_north;
     e58:	80 91 90 04 	lds	r24, 0x0490
     e5c:	90 91 91 04 	lds	r25, 0x0491
     e60:	90 93 e0 04 	sts	0x04E0, r25
     e64:	80 93 df 04 	sts	0x04DF, r24
}
     e68:	08 95       	ret

00000e6a <south>:
 * Example Call: south(direction);
 *
 */
void south(unsigned int previous_direction) 
{ 
    if (previous_direction == point_north) 
     e6a:	20 91 90 04 	lds	r18, 0x0490
     e6e:	30 91 91 04 	lds	r19, 0x0491
     e72:	28 17       	cp	r18, r24
     e74:	39 07       	cpc	r19, r25
     e76:	89 f4       	brne	.+34     	; 0xe9a <south+0x30>
	{    
		velocity(200,200);
     e78:	88 ec       	ldi	r24, 0xC8	; 200
     e7a:	68 ec       	ldi	r22, 0xC8	; 200
     e7c:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
	    turn_left(full_turn);//180 degree turn
     e80:	80 91 84 04 	lds	r24, 0x0484
     e84:	90 91 85 04 	lds	r25, 0x0485
     e88:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
		turn_info = 1800;
     e8c:	88 e0       	ldi	r24, 0x08	; 8
     e8e:	97 e0       	ldi	r25, 0x07	; 7
     e90:	90 93 e8 04 	sts	0x04E8, r25
     e94:	80 93 e7 04 	sts	0x04E7, r24
     e98:	3b c0       	rjmp	.+118    	; 0xf10 <south+0xa6>
    } 
	else if (previous_direction == point_east) 
     e9a:	20 91 e1 04 	lds	r18, 0x04E1
     e9e:	30 91 e2 04 	lds	r19, 0x04E2
     ea2:	28 17       	cp	r18, r24
     ea4:	39 07       	cpc	r19, r25
     ea6:	89 f4       	brne	.+34     	; 0xeca <south+0x60>
	{ 
		velocity(200,200);
     ea8:	88 ec       	ldi	r24, 0xC8	; 200
     eaa:	68 ec       	ldi	r22, 0xC8	; 200
     eac:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
        turn_right(half_turn);//Right
     eb0:	80 91 86 04 	lds	r24, 0x0486
     eb4:	90 91 87 04 	lds	r25, 0x0487
     eb8:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
		turn_info = 901;     
     ebc:	85 e8       	ldi	r24, 0x85	; 133
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	90 93 e8 04 	sts	0x04E8, r25
     ec4:	80 93 e7 04 	sts	0x04E7, r24
     ec8:	23 c0       	rjmp	.+70     	; 0xf10 <south+0xa6>
	}    
	else if (previous_direction == point_west)
     eca:	20 91 92 04 	lds	r18, 0x0492
     ece:	30 91 93 04 	lds	r19, 0x0493
     ed2:	28 17       	cp	r18, r24
     ed4:	39 07       	cpc	r19, r25
     ed6:	89 f4       	brne	.+34     	; 0xefa <south+0x90>
	{
		velocity(200,200);
     ed8:	88 ec       	ldi	r24, 0xC8	; 200
     eda:	68 ec       	ldi	r22, 0xC8	; 200
     edc:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
		turn_left(half_turn);//Left
     ee0:	80 91 86 04 	lds	r24, 0x0486
     ee4:	90 91 87 04 	lds	r25, 0x0487
     ee8:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
		turn_info = 902;
     eec:	86 e8       	ldi	r24, 0x86	; 134
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	90 93 e8 04 	sts	0x04E8, r25
     ef4:	80 93 e7 04 	sts	0x04E7, r24
     ef8:	0b c0       	rjmp	.+22     	; 0xf10 <south+0xa6>
	}
	else if (previous_direction == point_south)
     efa:	20 91 8e 04 	lds	r18, 0x048E
     efe:	30 91 8f 04 	lds	r19, 0x048F
     f02:	28 17       	cp	r18, r24
     f04:	39 07       	cpc	r19, r25
     f06:	21 f4       	brne	.+8      	; 0xf10 <south+0xa6>
	{
		turn_info = 0;
     f08:	10 92 e8 04 	sts	0x04E8, r1
     f0c:	10 92 e7 04 	sts	0x04E7, r1
	}
	
    direction = point_south;
     f10:	80 91 8e 04 	lds	r24, 0x048E
     f14:	90 91 8f 04 	lds	r25, 0x048F
     f18:	90 93 e0 04 	sts	0x04E0, r25
     f1c:	80 93 df 04 	sts	0x04DF, r24
}
     f20:	08 95       	ret

00000f22 <follow>:
*/
void follow()
{
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
     f28:	80 93 b2 04 	sts	0x04B2, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
     f32:	80 93 b1 04 	sts	0x04B1, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
     f3c:	80 93 b0 04 	sts	0x04B0, r24
		
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	43 e0       	ldi	r20, 0x03	; 3
     f46:	0e 94 85 05 	call	0xb0a	; 0xb0a <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	65 e0       	ldi	r22, 0x05	; 5
     f4e:	42 e0       	ldi	r20, 0x02	; 2
     f50:	0e 94 85 05 	call	0xb0a	; 0xb0a <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	69 e0       	ldi	r22, 0x09	; 9
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	0e 94 85 05 	call	0xb0a	; 0xb0a <print_sensor>
		
		int sum = Left_white_line + Center_white_line + Right_white_line;
     f5e:	40 91 b2 04 	lds	r20, 0x04B2
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	80 91 b1 04 	lds	r24, 0x04B1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	60 91 b0 04 	lds	r22, 0x04B0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	9a 01       	movw	r18, r20
     f72:	28 0f       	add	r18, r24
     f74:	39 1f       	adc	r19, r25
     f76:	26 0f       	add	r18, r22
     f78:	37 1f       	adc	r19, r23
		
		if(sum > 150)  //if sum value is greater than 150 then bot is on the node
     f7a:	27 39       	cpi	r18, 0x97	; 151
     f7c:	31 05       	cpc	r19, r1
     f7e:	0c f1       	brlt	.+66     	; 0xfc2 <follow+0xa0>
		{	
			stop();
     f80:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
			buzzer_on();
     f84:	0e 94 b1 05 	call	0xb62	; 0xb62 <buzzer_on>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	9f e7       	ldi	r25, 0x7F	; 127
     f8c:	a6 e1       	ldi	r26, 0x16	; 22
     f8e:	81 50       	subi	r24, 0x01	; 1
     f90:	90 40       	sbci	r25, 0x00	; 0
     f92:	a0 40       	sbci	r26, 0x00	; 0
     f94:	e1 f7       	brne	.-8      	; 0xf8e <follow+0x6c>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <follow+0x76>
     f98:	00 00       	nop
			_delay_ms(500);		//delay
			buzzer_off();
     f9a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <buzzer_off>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	9f e7       	ldi	r25, 0x7F	; 127
     fa2:	a6 e1       	ldi	r26, 0x16	; 22
     fa4:	81 50       	subi	r24, 0x01	; 1
     fa6:	90 40       	sbci	r25, 0x00	; 0
     fa8:	a0 40       	sbci	r26, 0x00	; 0
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <follow+0x82>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <follow+0x8c>
     fae:	00 00       	nop
			_delay_ms(500);
			velocity(220,220);
     fb0:	8c ed       	ldi	r24, 0xDC	; 220
     fb2:	6c ed       	ldi	r22, 0xDC	; 220
     fb4:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
			forward_mm(50);
     fb8:	82 e3       	ldi	r24, 0x32	; 50
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			{
				stop();
			}
		}
	}
}
     fc0:	08 95       	ret
			forward_mm(50);
			break;  //break the line following loop after encountering node to perform further actions
		}
		else  //if no node is encounter then simply follow the line
		{
			if(Center_white_line>threshold)
     fc2:	20 91 8c 04 	lds	r18, 0x048C
     fc6:	30 91 8d 04 	lds	r19, 0x048D
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	3c f4       	brge	.+14     	; 0xfde <follow+0xbc>
			{
				forward();
     fd0:	0e 94 36 04 	call	0x86c	; 0x86c <forward>
				velocity(220,220);
     fd4:	8c ed       	ldi	r24, 0xDC	; 220
     fd6:	6c ed       	ldi	r22, 0xDC	; 220
     fd8:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
     fdc:	a2 cf       	rjmp	.-188    	; 0xf22 <follow>
			}

			else if(Left_white_line>threshold)
     fde:	24 17       	cp	r18, r20
     fe0:	35 07       	cpc	r19, r21
     fe2:	4c f4       	brge	.+18     	; 0xff6 <follow+0xd4>
			{
				stop();
     fe4:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
				velocity(180,180);
     fe8:	84 eb       	ldi	r24, 0xB4	; 180
     fea:	64 eb       	ldi	r22, 0xB4	; 180
     fec:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
				soft_left();
     ff0:	0e 94 4a 04 	call	0x894	; 0x894 <soft_left>
     ff4:	96 cf       	rjmp	.-212    	; 0xf22 <follow>
			}

			else if(Right_white_line>threshold)
     ff6:	26 17       	cp	r18, r22
     ff8:	37 07       	cpc	r19, r23
     ffa:	4c f4       	brge	.+18     	; 0x100e <follow+0xec>
			{
				stop();
     ffc:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
				velocity(180,180);
    1000:	84 eb       	ldi	r24, 0xB4	; 180
    1002:	64 eb       	ldi	r22, 0xB4	; 180
    1004:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
				soft_right();
    1008:	0e 94 46 04 	call	0x88c	; 0x88c <soft_right>
    100c:	8a cf       	rjmp	.-236    	; 0xf22 <follow>
			}
			
			else if(Center_white_line<=threshold && Left_white_line<=threshold && Right_white_line<=threshold)
			{
				stop();
    100e:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
    1012:	87 cf       	rjmp	.-242    	; 0xf22 <follow>

00001014 <followback>:

void followback()
{
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
    101a:	80 93 b2 04 	sts	0x04B2, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
    1024:	80 93 b1 04 	sts	0x04B1, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	0e 94 6a 05 	call	0xad4	; 0xad4 <ADC_Conversion>
    102e:	80 93 b0 04 	sts	0x04B0, r24
		
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	43 e0       	ldi	r20, 0x03	; 3
    1038:	0e 94 85 05 	call	0xb0a	; 0xb0a <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	65 e0       	ldi	r22, 0x05	; 5
    1040:	42 e0       	ldi	r20, 0x02	; 2
    1042:	0e 94 85 05 	call	0xb0a	; 0xb0a <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	69 e0       	ldi	r22, 0x09	; 9
    104a:	41 e0       	ldi	r20, 0x01	; 1
    104c:	0e 94 85 05 	call	0xb0a	; 0xb0a <print_sensor>
		
		int sum = Left_white_line + Center_white_line + Right_white_line;
    1050:	40 91 b2 04 	lds	r20, 0x04B2
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	80 91 b1 04 	lds	r24, 0x04B1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	60 91 b0 04 	lds	r22, 0x04B0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	9a 01       	movw	r18, r20
    1064:	28 0f       	add	r18, r24
    1066:	39 1f       	adc	r19, r25
    1068:	26 0f       	add	r18, r22
    106a:	37 1f       	adc	r19, r23
		
		if(sum > 150)  //if sum value is greater than 150 then bot is on the node
    106c:	27 39       	cpi	r18, 0x97	; 151
    106e:	31 05       	cpc	r19, r1
    1070:	cc f0       	brlt	.+50     	; 0x10a4 <followback+0x90>
		{	
			stop();
    1072:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
			buzzer_on();
    1076:	0e 94 b1 05 	call	0xb62	; 0xb62 <buzzer_on>
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	9f e7       	ldi	r25, 0x7F	; 127
    107e:	a6 e1       	ldi	r26, 0x16	; 22
    1080:	81 50       	subi	r24, 0x01	; 1
    1082:	90 40       	sbci	r25, 0x00	; 0
    1084:	a0 40       	sbci	r26, 0x00	; 0
    1086:	e1 f7       	brne	.-8      	; 0x1080 <followback+0x6c>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <followback+0x76>
    108a:	00 00       	nop
			_delay_ms(500);		//delay
			buzzer_off();
    108c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <buzzer_off>
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	9f e7       	ldi	r25, 0x7F	; 127
    1094:	a6 e1       	ldi	r26, 0x16	; 22
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	90 40       	sbci	r25, 0x00	; 0
    109a:	a0 40       	sbci	r26, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <followback+0x82>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <followback+0x8c>
    10a0:	00 00       	nop
			{
				stop();
			}
		}
	}
}
    10a2:	08 95       	ret
			_delay_ms(500);
			break;  //break the line following loop after encountering node to perform further actions
		}
		else  //if no node is encounter then simply follow the line
		{
			if(Center_white_line>threshold)
    10a4:	20 91 8c 04 	lds	r18, 0x048C
    10a8:	30 91 8d 04 	lds	r19, 0x048D
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	4c f4       	brge	.+18     	; 0x10c4 <followback+0xb0>
			{
				back();
    10b2:	0e 94 3a 04 	call	0x874	; 0x874 <back>
				velocity(220,220);
    10b6:	8c ed       	ldi	r24, 0xDC	; 220
    10b8:	6c ed       	ldi	r22, 0xDC	; 220
    10ba:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
				back();
    10be:	0e 94 3a 04 	call	0x874	; 0x874 <back>
    10c2:	a8 cf       	rjmp	.-176    	; 0x1014 <followback>
			}

			else if(Left_white_line>threshold)
    10c4:	24 17       	cp	r18, r20
    10c6:	35 07       	cpc	r19, r21
    10c8:	4c f4       	brge	.+18     	; 0x10dc <followback+0xc8>
			{
				stop();
    10ca:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
				velocity(160,200);
    10ce:	80 ea       	ldi	r24, 0xA0	; 160
    10d0:	68 ec       	ldi	r22, 0xC8	; 200
    10d2:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
				back();
    10d6:	0e 94 3a 04 	call	0x874	; 0x874 <back>
    10da:	9c cf       	rjmp	.-200    	; 0x1014 <followback>
			}

			else if(Right_white_line>threshold)
    10dc:	26 17       	cp	r18, r22
    10de:	37 07       	cpc	r19, r23
    10e0:	4c f4       	brge	.+18     	; 0x10f4 <followback+0xe0>
			{
				stop();
    10e2:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
				velocity(200,160);
    10e6:	88 ec       	ldi	r24, 0xC8	; 200
    10e8:	60 ea       	ldi	r22, 0xA0	; 160
    10ea:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
				back();
    10ee:	0e 94 3a 04 	call	0x874	; 0x874 <back>
    10f2:	90 cf       	rjmp	.-224    	; 0x1014 <followback>
			}
			
			else if(Center_white_line<=threshold && Left_white_line<=threshold && Right_white_line<=threshold)
			{
				stop();
    10f4:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
    10f8:	8d cf       	rjmp	.-230    	; 0x1014 <followback>

000010fa <travel>:
void travel(int from, int to)
	{ 
		int i;
		for (i=0;i<4;i++)
		{
			if (directionGraph[from-1][i]== to)
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	fc 01       	movw	r30, r24
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	e0 50       	subi	r30, 0x00	; 0
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	20 81       	ld	r18, Z
    1110:	31 81       	ldd	r19, Z+1	; 0x01
    1112:	26 17       	cp	r18, r22
    1114:	37 07       	cpc	r19, r23
    1116:	09 f4       	brne	.+2      	; 0x111a <travel+0x20>
    1118:	72 c0       	rjmp	.+228    	; 0x11fe <travel+0x104>
    111a:	fc 01       	movw	r30, r24
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	e0 50       	subi	r30, 0x00	; 0
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	22 81       	ldd	r18, Z+2	; 0x02
    112e:	33 81       	ldd	r19, Z+3	; 0x03
    1130:	26 17       	cp	r18, r22
    1132:	37 07       	cpc	r19, r23
    1134:	f9 f0       	breq	.+62     	; 0x1174 <travel+0x7a>
    1136:	fc 01       	movw	r30, r24
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	e0 50       	subi	r30, 0x00	; 0
    1146:	fe 4f       	sbci	r31, 0xFE	; 254
    1148:	24 81       	ldd	r18, Z+4	; 0x04
    114a:	35 81       	ldd	r19, Z+5	; 0x05
    114c:	26 17       	cp	r18, r22
    114e:	37 07       	cpc	r19, r23
    1150:	a1 f0       	breq	.+40     	; 0x117a <travel+0x80>
    1152:	fc 01       	movw	r30, r24
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	ee 0f       	add	r30, r30
    115a:	ff 1f       	adc	r31, r31
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	e0 50       	subi	r30, 0x00	; 0
    1162:	fe 4f       	sbci	r31, 0xFE	; 254
    1164:	86 81       	ldd	r24, Z+6	; 0x06
    1166:	97 81       	ldd	r25, Z+7	; 0x07
    1168:	86 17       	cp	r24, r22
    116a:	97 07       	cpc	r25, r23
    116c:	79 f4       	brne	.+30     	; 0x118c <travel+0x92>
    116e:	83 e0       	ldi	r24, 0x03	; 3
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	05 c0       	rjmp	.+10     	; 0x117e <travel+0x84>
 *				  travel(current_position,next_position)
 */
void travel(int from, int to)
	{ 
		int i;
		for (i=0;i<4;i++)
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <travel+0x84>
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	90 e0       	ldi	r25, 0x00	; 0
			if (directionGraph[from-1][i]== to)
			{
				break; //Break out of If loop
			}
		}
		next_direction=i;
    117e:	90 93 1c 05 	sts	0x051C, r25
    1182:	80 93 1b 05 	sts	0x051B, r24
		
		if (next_direction==0)
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	41 f0       	breq	.+16     	; 0x119a <travel+0xa0>
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <travel+0xac>
			if (directionGraph[from-1][i]== to)
			{
				break; //Break out of If loop
			}
		}
		next_direction=i;
    118c:	84 e0       	ldi	r24, 0x04	; 4
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	90 93 1c 05 	sts	0x051C, r25
    1194:	80 93 1b 05 	sts	0x051B, r24
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <travel+0xac>
		
		if (next_direction==0)
		{
			east(direction);
    119a:	80 91 df 04 	lds	r24, 0x04DF
    119e:	90 91 e0 04 	lds	r25, 0x04E0
    11a2:	0e 94 21 06 	call	0xc42	; 0xc42 <east>
		}
		if (next_direction==1)
    11a6:	80 91 1b 05 	lds	r24, 0x051B
    11aa:	90 91 1c 05 	lds	r25, 0x051C
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	31 f4       	brne	.+12     	; 0x11c0 <travel+0xc6>
		{
			west(direction);
    11b4:	80 91 df 04 	lds	r24, 0x04DF
    11b8:	90 91 e0 04 	lds	r25, 0x04E0
    11bc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <west>
		}
		if (next_direction==2)
    11c0:	80 91 1b 05 	lds	r24, 0x051B
    11c4:	90 91 1c 05 	lds	r25, 0x051C
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	91 05       	cpc	r25, r1
    11cc:	31 f4       	brne	.+12     	; 0x11da <travel+0xe0>
		{
			north(direction);
    11ce:	80 91 df 04 	lds	r24, 0x04DF
    11d2:	90 91 e0 04 	lds	r25, 0x04E0
    11d6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <north>
		}
		if (next_direction==3)
    11da:	80 91 1b 05 	lds	r24, 0x051B
    11de:	90 91 1c 05 	lds	r25, 0x051C
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	31 f4       	brne	.+12     	; 0x11f4 <travel+0xfa>
		{
			south(direction);
    11e8:	80 91 df 04 	lds	r24, 0x04DF
    11ec:	90 91 e0 04 	lds	r25, 0x04E0
    11f0:	0e 94 35 07 	call	0xe6a	; 0xe6a <south>
		}
		stop();
    11f4:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
	
		follow();		
    11f8:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
	}
    11fc:	08 95       	ret
			if (directionGraph[from-1][i]== to)
			{
				break; //Break out of If loop
			}
		}
		next_direction=i;
    11fe:	10 92 1c 05 	sts	0x051C, r1
    1202:	10 92 1b 05 	sts	0x051B, r1
    1206:	c9 cf       	rjmp	.-110    	; 0x119a <travel+0xa0>

00001208 <minDistance>:
 *				  djikstra(arena[48],src)
 */

// A utility function to find the vertex with minimum distance value, from the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
	int min = INT_MAX, min_index; // Initialize min value
	int v;
	for (v = 0; v < V; v++)
	if (sptSet[v] == false && dist[v] <= min)
	min = dist[v], min_index = v;
    120c:	a6 2f       	mov	r26, r22
    120e:	b7 2f       	mov	r27, r23
    1210:	e8 2f       	mov	r30, r24
    1212:	f9 2f       	mov	r31, r25
// A utility function to find the vertex with minimum distance value, from the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
	int min = INT_MAX, min_index; // Initialize min value
	int v;
	for (v = 0; v < V; v++)
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
 */

// A utility function to find the vertex with minimum distance value, from the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
	int min = INT_MAX, min_index; // Initialize min value
    1218:	6f ef       	ldi	r22, 0xFF	; 255
    121a:	7f e7       	ldi	r23, 0x7F	; 127
	int v;
	for (v = 0; v < V; v++)
	if (sptSet[v] == false && dist[v] <= min)
    121c:	8d 91       	ld	r24, X+
    121e:	88 23       	and	r24, r24
    1220:	41 f4       	brne	.+16     	; 0x1232 <minDistance+0x2a>
    1222:	40 81       	ld	r20, Z
    1224:	51 81       	ldd	r21, Z+1	; 0x01
    1226:	64 17       	cp	r22, r20
    1228:	75 07       	cpc	r23, r21
    122a:	1c f0       	brlt	.+6      	; 0x1232 <minDistance+0x2a>
    122c:	d2 2f       	mov	r29, r18
    122e:	c3 2f       	mov	r28, r19
	min = dist[v], min_index = v;
    1230:	ba 01       	movw	r22, r20
// A utility function to find the vertex with minimum distance value, from the set of vertices not yet included in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
	int min = INT_MAX, min_index; // Initialize min value
	int v;
	for (v = 0; v < V; v++)
    1232:	2f 5f       	subi	r18, 0xFF	; 255
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	32 96       	adiw	r30, 0x02	; 2
    1238:	20 31       	cpi	r18, 0x10	; 16
    123a:	31 05       	cpc	r19, r1
    123c:	79 f7       	brne	.-34     	; 0x121c <minDistance+0x14>
	if (sptSet[v] == false && dist[v] <= min)
	min = dist[v], min_index = v;

	return min_index;
}
    123e:	8d 2f       	mov	r24, r29
    1240:	9c 2f       	mov	r25, r28
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	08 95       	ret

00001248 <printPath>:

void printPath(int parent[], int j) // Function to print shortest path from source to j using parent array
{
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	eb 01       	movw	r28, r22
	if (parent[j]==-1) 	// Base Case : If j is source
    124e:	fb 01       	movw	r30, r22
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e8 0f       	add	r30, r24
    1256:	f9 1f       	adc	r31, r25
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	2f ef       	ldi	r18, 0xFF	; 255
    125e:	6f 3f       	cpi	r22, 0xFF	; 255
    1260:	72 07       	cpc	r23, r18
    1262:	d9 f0       	breq	.+54     	; 0x129a <printPath+0x52>
	return;

	printPath(parent, parent[j]);
    1264:	0e 94 24 09 	call	0x1248	; 0x1248 <printPath>

	shortest_path[0]=src;
    1268:	80 91 8a 04 	lds	r24, 0x048A
    126c:	90 91 8b 04 	lds	r25, 0x048B
    1270:	90 93 ba 04 	sts	0x04BA, r25
    1274:	80 93 b9 04 	sts	0x04B9, r24
	shortest_path[path_index]=j+1;
    1278:	80 91 eb 04 	lds	r24, 0x04EB
    127c:	90 91 ec 04 	lds	r25, 0x04EC
    1280:	fc 01       	movw	r30, r24
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	e7 54       	subi	r30, 0x47	; 71
    1288:	fb 4f       	sbci	r31, 0xFB	; 251
    128a:	21 96       	adiw	r28, 0x01	; 1
    128c:	d1 83       	std	Z+1, r29	; 0x01
    128e:	c0 83       	st	Z, r28
	path_index++;
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	90 93 ec 04 	sts	0x04EC, r25
    1296:	80 93 eb 04 	sts	0x04EB, r24
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <djikstra>:

void djikstra(int graph[V][V], int src) // Function that implements Dijkstra's single source shortest path
{
    12a0:	2f 92       	push	r2
    12a2:	3f 92       	push	r3
    12a4:	4f 92       	push	r4
    12a6:	5f 92       	push	r5
    12a8:	6f 92       	push	r6
    12aa:	7f 92       	push	r7
    12ac:	8f 92       	push	r8
    12ae:	9f 92       	push	r9
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	e5 97       	sbiw	r28, 0x35	; 53
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	9c ab       	sts	0x5c, r25
    12d6:	8b ab       	sts	0x5b, r24
	bool sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest path tree or shortest distance from src to i is finalized
	int parent[V],i, u; // Parent array to store shortest path tree
	src=src-1;
    12d8:	8b 01       	movw	r16, r22
    12da:	01 50       	subi	r16, 0x01	; 1
    12dc:	10 40       	sbci	r17, 0x00	; 0
    12de:	0f 2e       	mov	r0, r31
    12e0:	f1 e1       	ldi	r31, 0x11	; 17
    12e2:	ef 2e       	mov	r14, r31
    12e4:	ff 24       	eor	r15, r15
    12e6:	f0 2d       	mov	r31, r0
    12e8:	ec 0e       	add	r14, r28
    12ea:	fd 1e       	adc	r15, r29
    12ec:	0f 2e       	mov	r0, r31
    12ee:	f9 ef       	ldi	r31, 0xF9	; 249
    12f0:	cf 2e       	mov	r12, r31
    12f2:	f4 e0       	ldi	r31, 0x04	; 4
    12f4:	df 2e       	mov	r13, r31
    12f6:	f0 2d       	mov	r31, r0
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	9a ab       	sts	0x5a, r25
    12fe:	89 ab       	sts	0x59, r24
	shortest_path[0]=src;
	shortest_path[path_index]=j+1;
	path_index++;
}

void djikstra(int graph[V][V], int src) // Function that implements Dijkstra's single source shortest path
    1300:	ce 01       	movw	r24, r28
    1302:	c1 96       	adiw	r24, 0x31	; 49
    1304:	de 01       	movw	r26, r28
    1306:	11 96       	adiw	r26, 0x01	; 1
    1308:	96 01       	movw	r18, r12
    130a:	f7 01       	movw	r30, r14
	int parent[V],i, u; // Parent array to store shortest path tree
	src=src-1;
	
	for (i = 0; i < V; i++) // Initialize all distances as INFINITE and stpSet[] as false
	{
		parent[i] = -1;
    130c:	4f ef       	ldi	r20, 0xFF	; 255
    130e:	5f ef       	ldi	r21, 0xFF	; 255
		dist[i] = INT_MAX;
    1310:	6f ef       	ldi	r22, 0xFF	; 255
    1312:	7f e7       	ldi	r23, 0x7F	; 127
    1314:	5d 01       	movw	r10, r26
	int parent[V],i, u; // Parent array to store shortest path tree
	src=src-1;
	
	for (i = 0; i < V; i++) // Initialize all distances as INFINITE and stpSet[] as false
	{
		parent[i] = -1;
    1316:	41 93       	st	Z+, r20
    1318:	51 93       	st	Z+, r21
		dist[i] = INT_MAX;
    131a:	d9 01       	movw	r26, r18
    131c:	6d 93       	st	X+, r22
    131e:	7d 93       	st	X+, r23
    1320:	9d 01       	movw	r18, r26
		sptSet[i] = false;
    1322:	d5 01       	movw	r26, r10
    1324:	1d 92       	st	X+, r1
    1326:	5d 01       	movw	r10, r26
{
	bool sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest path tree or shortest distance from src to i is finalized
	int parent[V],i, u; // Parent array to store shortest path tree
	src=src-1;
	
	for (i = 0; i < V; i++) // Initialize all distances as INFINITE and stpSet[] as false
    1328:	e8 17       	cp	r30, r24
    132a:	f9 07       	cpc	r31, r25
    132c:	a1 f7       	brne	.-24     	; 0x1316 <djikstra+0x76>
		parent[i] = -1;
		dist[i] = INT_MAX;
		sptSet[i] = false;
	}
	
	dist[src] = 0;	// Distance of source vertex from itself is always 0
    132e:	f8 01       	movw	r30, r16
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	e7 50       	subi	r30, 0x07	; 7
    1336:	fb 4f       	sbci	r31, 0xFB	; 251
    1338:	11 82       	std	Z+1, r1	; 0x01
    133a:	10 82       	st	Z, r1
    133c:	0f 2e       	mov	r0, r31
    133e:	ff e0       	ldi	r31, 0x0F	; 15
    1340:	af 2e       	mov	r10, r31
    1342:	bb 24       	eor	r11, r11
    1344:	f0 2d       	mov	r31, r0
	int count;
	
	for (count = 0; count < V-1; count++) // Find shortest path for all vertices
	{
		u = minDistance(dist, sptSet);// U contains the index of the minimum distance from source to dest
    1346:	0f 2e       	mov	r0, r31
    1348:	f9 ef       	ldi	r31, 0xF9	; 249
    134a:	8f 2e       	mov	r8, r31
    134c:	f4 e0       	ldi	r31, 0x04	; 4
    134e:	9f 2e       	mov	r9, r31
    1350:	f0 2d       	mov	r31, r0
		sptSet[u] = true; // Mark the picked vertex as processed
    1352:	77 24       	eor	r7, r7
    1354:	73 94       	inc	r7
	shortest_path[0]=src;
	shortest_path[path_index]=j+1;
	path_index++;
}

void djikstra(int graph[V][V], int src) // Function that implements Dijkstra's single source shortest path
    1356:	8e 01       	movw	r16, r28
    1358:	0f 5e       	subi	r16, 0xEF	; 239
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	6e 2c       	mov	r6, r14
    135e:	5f 2c       	mov	r5, r15
    1360:	4c 2c       	mov	r4, r12
    1362:	3d 2c       	mov	r3, r13
    1364:	29 a8       	sts	0x89, r18
    1366:	ba a9       	sts	0x4a, r27
    1368:	bd ab       	sts	0x5d, r27
	dist[src] = 0;	// Distance of source vertex from itself is always 0
	int count;
	
	for (count = 0; count < V-1; count++) // Find shortest path for all vertices
	{
		u = minDistance(dist, sptSet);// U contains the index of the minimum distance from source to dest
    136a:	c4 01       	movw	r24, r8
    136c:	be 01       	movw	r22, r28
    136e:	6f 5f       	subi	r22, 0xFF	; 255
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	0e 94 04 09 	call	0x1208	; 0x1208 <minDistance>
    1376:	7c 01       	movw	r14, r24
		sptSet[u] = true; // Mark the picked vertex as processed
    1378:	e1 e0       	ldi	r30, 0x01	; 1
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	ec 0f       	add	r30, r28
    137e:	fd 1f       	adc	r31, r29
    1380:	e8 0f       	add	r30, r24
    1382:	f9 1f       	adc	r31, r25
    1384:	70 82       	st	Z, r7
		int v;
		for (v = 0; v < V; v++) 		// Update dist value of the adjacent vertices of the picked vertex.
		if (!sptSet[v] && graph[u][v] &&      // Update dist[v] only if is not in sptSet, there is
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	82 95       	swap	r24
    138c:	92 95       	swap	r25
    138e:	90 7f       	andi	r25, 0xF0	; 240
    1390:	98 27       	eor	r25, r24
    1392:	80 7f       	andi	r24, 0xF0	; 240
    1394:	98 27       	eor	r25, r24
    1396:	ab a9       	sts	0x4b, r26
    1398:	bc a9       	sts	0x4c, r27
    139a:	a8 0f       	add	r26, r24
    139c:	b9 1f       	adc	r27, r25
	shortest_path[0]=src;
	shortest_path[path_index]=j+1;
	path_index++;
}

void djikstra(int graph[V][V], int src) // Function that implements Dijkstra's single source shortest path
    139e:	66 2d       	mov	r22, r6
    13a0:	75 2d       	mov	r23, r5
    13a2:	44 2d       	mov	r20, r4
    13a4:	53 2d       	mov	r21, r3
    13a6:	e2 2d       	mov	r30, r2
    13a8:	fd a9       	sts	0x4d, r31
		u = minDistance(dist, sptSet);// U contains the index of the minimum distance from source to dest
		sptSet[u] = true; // Mark the picked vertex as processed
		int v;
		for (v = 0; v < V; v++) 		// Update dist value of the adjacent vertices of the picked vertex.
		if (!sptSet[v] && graph[u][v] &&      // Update dist[v] only if is not in sptSet, there is
		dist[u] + graph[u][v] < dist[v])  // an edge from u to v, and total weight of path from
    13aa:	c7 01       	movw	r24, r14
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	64 01       	movw	r12, r8
    13b2:	c8 0e       	add	r12, r24
    13b4:	d9 1e       	adc	r13, r25
    13b6:	ba ab       	sts	0x5a, r27
    13b8:	a9 ab       	sts	0x59, r26
	{
		u = minDistance(dist, sptSet);// U contains the index of the minimum distance from source to dest
		sptSet[u] = true; // Mark the picked vertex as processed
		int v;
		for (v = 0; v < V; v++) 		// Update dist value of the adjacent vertices of the picked vertex.
		if (!sptSet[v] && graph[u][v] &&      // Update dist[v] only if is not in sptSet, there is
    13ba:	81 91       	ld	r24, Z+
    13bc:	88 23       	and	r24, r24
    13be:	d1 f4       	brne	.+52     	; 0x13f4 <djikstra+0x154>
    13c0:	a9 a9       	sts	0x49, r26
    13c2:	ba a9       	sts	0x4a, r27
    13c4:	8d 91       	ld	r24, X+
    13c6:	9c 91       	ld	r25, X
    13c8:	11 97       	sbiw	r26, 0x01	; 1
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	99 f0       	breq	.+38     	; 0x13f4 <djikstra+0x154>
		dist[u] + graph[u][v] < dist[v])  // an edge from u to v, and total weight of path from
    13ce:	d6 01       	movw	r26, r12
    13d0:	2d 91       	ld	r18, X+
    13d2:	3c 91       	ld	r19, X
    13d4:	82 0f       	add	r24, r18
    13d6:	93 1f       	adc	r25, r19
	{
		u = minDistance(dist, sptSet);// U contains the index of the minimum distance from source to dest
		sptSet[u] = true; // Mark the picked vertex as processed
		int v;
		for (v = 0; v < V; v++) 		// Update dist value of the adjacent vertices of the picked vertex.
		if (!sptSet[v] && graph[u][v] &&      // Update dist[v] only if is not in sptSet, there is
    13d8:	da 01       	movw	r26, r20
    13da:	2d 91       	ld	r18, X+
    13dc:	3c 91       	ld	r19, X
    13de:	11 97       	sbiw	r26, 0x01	; 1
    13e0:	82 17       	cp	r24, r18
    13e2:	93 07       	cpc	r25, r19
    13e4:	3c f4       	brge	.+14     	; 0x13f4 <djikstra+0x154>
		dist[u] + graph[u][v] < dist[v])  // an edge from u to v, and total weight of path from
		{									  // src to v through u is smaller than current value of
			parent[v] = u;					  // dist[v]
    13e6:	db 01       	movw	r26, r22
    13e8:	ed 92       	st	X+, r14
    13ea:	fc 92       	st	X, r15
			dist[v] = dist[u] + graph[u][v];
    13ec:	da 01       	movw	r26, r20
    13ee:	11 96       	adiw	r26, 0x01	; 1
    13f0:	9c 93       	st	X, r25
    13f2:	8e 93       	st	-X, r24
    13f4:	89 a9       	sts	0x49, r24
    13f6:	9a a9       	sts	0x4a, r25
    13f8:	02 96       	adiw	r24, 0x02	; 2
    13fa:	9a ab       	sts	0x5a, r25
    13fc:	89 ab       	sts	0x59, r24
    13fe:	4e 5f       	subi	r20, 0xFE	; 254
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	6e 5f       	subi	r22, 0xFE	; 254
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
	for (count = 0; count < V-1; count++) // Find shortest path for all vertices
	{
		u = minDistance(dist, sptSet);// U contains the index of the minimum distance from source to dest
		sptSet[u] = true; // Mark the picked vertex as processed
		int v;
		for (v = 0; v < V; v++) 		// Update dist value of the adjacent vertices of the picked vertex.
    1406:	e0 17       	cp	r30, r16
    1408:	f1 07       	cpc	r31, r17
    140a:	b9 f6       	brne	.-82     	; 0x13ba <djikstra+0x11a>
    140c:	08 94       	sec
    140e:	a1 08       	sbc	r10, r1
    1410:	b1 08       	sbc	r11, r1
	}
	
	dist[src] = 0;	// Distance of source vertex from itself is always 0
	int count;
	
	for (count = 0; count < V-1; count++) // Find shortest path for all vertices
    1412:	a1 14       	cp	r10, r1
    1414:	b1 04       	cpc	r11, r1
    1416:	09 f0       	breq	.+2      	; 0x141a <djikstra+0x17a>
    1418:	a8 cf       	rjmp	.-176    	; 0x136a <djikstra+0xca>
		{									  // src to v through u is smaller than current value of
			parent[v] = u;					  // dist[v]
			dist[v] = dist[u] + graph[u][v];
		}
	}
	printPath(parent, dest-1);
    141a:	60 91 e5 04 	lds	r22, 0x04E5
    141e:	70 91 e6 04 	lds	r23, 0x04E6
    1422:	61 50       	subi	r22, 0x01	; 1
    1424:	70 40       	sbci	r23, 0x00	; 0
    1426:	ce 01       	movw	r24, r28
    1428:	41 96       	adiw	r24, 0x11	; 17
    142a:	0e 94 24 09 	call	0x1248	; 0x1248 <printPath>
	path_index=1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	90 93 ec 04 	sts	0x04EC, r25
    1436:	80 93 eb 04 	sts	0x04EB, r24
}
    143a:	e5 96       	adiw	r28, 0x35	; 53
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	bf 90       	pop	r11
    1458:	af 90       	pop	r10
    145a:	9f 90       	pop	r9
    145c:	8f 90       	pop	r8
    145e:	7f 90       	pop	r7
    1460:	6f 90       	pop	r6
    1462:	5f 90       	pop	r5
    1464:	4f 90       	pop	r4
    1466:	3f 90       	pop	r3
    1468:	2f 90       	pop	r2
    146a:	08 95       	ret

0000146c <travel_path>:


//Function that will call the travel function and have the bot travel from one node to another.
void travel_path(int shortest_path[V])
{
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	6c 01       	movw	r12, r24
	int i=1;
	while(1)
	{
		if (shortest_path[i] == 0)
    147e:	fc 01       	movw	r30, r24
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	09 f4       	brne	.+2      	; 0x148a <travel_path+0x1e>
    1488:	8a c0       	rjmp	.+276    	; 0x159e <travel_path+0x132>
		{
			break;
		}
		dest= shortest_path[i];
    148a:	90 93 e6 04 	sts	0x04E6, r25
    148e:	80 93 e5 04 	sts	0x04E5, r24
		if (src == dest)
    1492:	40 91 8a 04 	lds	r20, 0x048A
    1496:	50 91 8b 04 	lds	r21, 0x048B
    149a:	84 17       	cp	r24, r20
    149c:	95 07       	cpc	r25, r21
    149e:	09 f4       	brne	.+2      	; 0x14a2 <travel_path+0x36>
    14a0:	7e c0       	rjmp	.+252    	; 0x159e <travel_path+0x132>
	path_index=1;
}


//Function that will call the travel function and have the bot travel from one node to another.
void travel_path(int shortest_path[V])
    14a2:	ee 24       	eor	r14, r14
    14a4:	ff 24       	eor	r15, r15
    14a6:	68 94       	set
    14a8:	e2 f8       	bld	r14, 2
    14aa:	ec 0c       	add	r14, r12
    14ac:	fd 1c       	adc	r15, r13
{
	int i=1;
	while(1)
	{
		if (shortest_path[i] == 0)
    14ae:	c1 e0       	ldi	r28, 0x01	; 1
    14b0:	d0 e0       	ldi	r29, 0x00	; 0


//Function that will call the travel function and have the bot travel from one node to another.
void travel_path(int shortest_path[V])
{
	int i=1;
    14b2:	01 e0       	ldi	r16, 0x01	; 1
    14b4:	10 e0       	ldi	r17, 0x00	; 0
    14b6:	0c c0       	rjmp	.+24     	; 0x14d0 <travel_path+0x64>
	{
		if (shortest_path[i] == 0)
		{
			break;
		}
		dest= shortest_path[i];
    14b8:	90 93 e6 04 	sts	0x04E6, r25
    14bc:	80 93 e5 04 	sts	0x04E5, r24
		if (src == dest)
    14c0:	40 91 8a 04 	lds	r20, 0x048A
    14c4:	50 91 8b 04 	lds	r21, 0x048B
    14c8:	84 17       	cp	r24, r20
    14ca:	95 07       	cpc	r25, r21
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <travel_path+0x64>
    14ce:	67 c0       	rjmp	.+206    	; 0x159e <travel_path+0x132>
		{
			break;
		}
		lcd_print(2,12, src,2);
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	6c e0       	ldi	r22, 0x0C	; 12
    14d4:	22 e0       	ldi	r18, 0x02	; 2
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
		lcd_print(2, 15, dest,2);
    14dc:	40 91 e5 04 	lds	r20, 0x04E5
    14e0:	50 91 e6 04 	lds	r21, 0x04E6
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	6f e0       	ldi	r22, 0x0F	; 15
    14e8:	22 e0       	ldi	r18, 0x02	; 2
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
		travel(src, dest);
    14f0:	60 91 e5 04 	lds	r22, 0x04E5
    14f4:	70 91 e6 04 	lds	r23, 0x04E6
    14f8:	80 91 8a 04 	lds	r24, 0x048A
    14fc:	90 91 8b 04 	lds	r25, 0x048B
    1500:	0e 94 7d 08 	call	0x10fa	; 0x10fa <travel>
		prev_node= src;
    1504:	80 91 8a 04 	lds	r24, 0x048A
    1508:	90 91 8b 04 	lds	r25, 0x048B
    150c:	90 93 89 04 	sts	0x0489, r25
    1510:	80 93 88 04 	sts	0x0488, r24
		src= dest;
    1514:	40 91 e5 04 	lds	r20, 0x04E5
    1518:	50 91 e6 04 	lds	r21, 0x04E6
    151c:	50 93 8b 04 	sts	0x048B, r21
    1520:	40 93 8a 04 	sts	0x048A, r20
		if(shortest_path[i+1] == 0)
    1524:	fe 01       	movw	r30, r28
    1526:	31 96       	adiw	r30, 0x01	; 1
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	ec 0d       	add	r30, r12
    152e:	fd 1d       	adc	r31, r13
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	a9 f4       	brne	.+42     	; 0x1562 <travel_path+0xf6>
		{
			lcd_print(2, 10 , orientation, 1);
    1538:	40 91 b5 04 	lds	r20, 0x04B5
    153c:	50 91 b6 04 	lds	r21, 0x04B6
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	6a e0       	ldi	r22, 0x0A	; 10
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
			lcd_print(2, 12, direction , 1);
    154c:	40 91 df 04 	lds	r20, 0x04DF
    1550:	50 91 e0 04 	lds	r21, 0x04E0
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	6c e0       	ldi	r22, 0x0C	; 12
    1558:	21 e0       	ldi	r18, 0x01	; 1
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
			break;
    1560:	1e c0       	rjmp	.+60     	; 0x159e <travel_path+0x132>
		}
		dest= shortest_path[i+1];
    1562:	90 93 e6 04 	sts	0x04E6, r25
    1566:	80 93 e5 04 	sts	0x04E5, r24
		lcd_print(2,12, src,2);
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	6c e0       	ldi	r22, 0x0C	; 12
    156e:	22 e0       	ldi	r18, 0x02	; 2
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
		lcd_print(2,15, dest,2);
    1576:	40 91 e5 04 	lds	r20, 0x04E5
    157a:	50 91 e6 04 	lds	r21, 0x04E6
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	6f e0       	ldi	r22, 0x0F	; 15
    1582:	22 e0       	ldi	r18, 0x02	; 2
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
		i++;
    158a:	0f 5f       	subi	r16, 0xFF	; 255
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
void travel_path(int shortest_path[V])
{
	int i=1;
	while(1)
	{
		if (shortest_path[i] == 0)
    158e:	e8 01       	movw	r28, r16
    1590:	f7 01       	movw	r30, r14
    1592:	81 91       	ld	r24, Z+
    1594:	91 91       	ld	r25, Z+
    1596:	7f 01       	movw	r14, r30
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	09 f0       	breq	.+2      	; 0x159e <travel_path+0x132>
    159c:	8d cf       	rjmp	.-230    	; 0x14b8 <travel_path+0x4c>
		dest= shortest_path[i+1];
		lcd_print(2,12, src,2);
		lcd_print(2,15, dest,2);
		i++;
	}
}
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	08 95       	ret

000015b0 <beep_beep_buzzer>:

void beep_beep_buzzer()
{
	buzzer_on();
    15b0:	0e 94 b1 05 	call	0xb62	; 0xb62 <buzzer_on>
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	9f ef       	ldi	r25, 0xFF	; 255
    15b8:	a8 e0       	ldi	r26, 0x08	; 8
    15ba:	81 50       	subi	r24, 0x01	; 1
    15bc:	90 40       	sbci	r25, 0x00	; 0
    15be:	a0 40       	sbci	r26, 0x00	; 0
    15c0:	e1 f7       	brne	.-8      	; 0x15ba <beep_beep_buzzer+0xa>
    15c2:	00 c0       	rjmp	.+0      	; 0x15c4 <beep_beep_buzzer+0x14>
    15c4:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
    15c6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <buzzer_off>
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	9f e3       	ldi	r25, 0x3F	; 63
    15ce:	a2 e0       	ldi	r26, 0x02	; 2
    15d0:	81 50       	subi	r24, 0x01	; 1
    15d2:	90 40       	sbci	r25, 0x00	; 0
    15d4:	a0 40       	sbci	r26, 0x00	; 0
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <beep_beep_buzzer+0x20>
    15d8:	00 c0       	rjmp	.+0      	; 0x15da <beep_beep_buzzer+0x2a>
    15da:	00 00       	nop
	_delay_ms(50);
	buzzer_on();
    15dc:	0e 94 b1 05 	call	0xb62	; 0xb62 <buzzer_on>
    15e0:	8f ef       	ldi	r24, 0xFF	; 255
    15e2:	9f ef       	ldi	r25, 0xFF	; 255
    15e4:	a8 e0       	ldi	r26, 0x08	; 8
    15e6:	81 50       	subi	r24, 0x01	; 1
    15e8:	90 40       	sbci	r25, 0x00	; 0
    15ea:	a0 40       	sbci	r26, 0x00	; 0
    15ec:	e1 f7       	brne	.-8      	; 0x15e6 <beep_beep_buzzer+0x36>
    15ee:	00 c0       	rjmp	.+0      	; 0x15f0 <beep_beep_buzzer+0x40>
    15f0:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
    15f2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <buzzer_off>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	9f e3       	ldi	r25, 0x3F	; 63
    15fa:	a2 e0       	ldi	r26, 0x02	; 2
    15fc:	81 50       	subi	r24, 0x01	; 1
    15fe:	90 40       	sbci	r25, 0x00	; 0
    1600:	a0 40       	sbci	r26, 0x00	; 0
    1602:	e1 f7       	brne	.-8      	; 0x15fc <beep_beep_buzzer+0x4c>
    1604:	00 c0       	rjmp	.+0      	; 0x1606 <beep_beep_buzzer+0x56>
    1606:	00 00       	nop
	_delay_ms(50);
	buzzer_on();
    1608:	0e 94 b1 05 	call	0xb62	; 0xb62 <buzzer_on>
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	9f ef       	ldi	r25, 0xFF	; 255
    1610:	a8 e0       	ldi	r26, 0x08	; 8
    1612:	81 50       	subi	r24, 0x01	; 1
    1614:	90 40       	sbci	r25, 0x00	; 0
    1616:	a0 40       	sbci	r26, 0x00	; 0
    1618:	e1 f7       	brne	.-8      	; 0x1612 <beep_beep_buzzer+0x62>
    161a:	00 c0       	rjmp	.+0      	; 0x161c <beep_beep_buzzer+0x6c>
    161c:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
    161e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <buzzer_off>
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	9f e3       	ldi	r25, 0x3F	; 63
    1626:	a2 e0       	ldi	r26, 0x02	; 2
    1628:	81 50       	subi	r24, 0x01	; 1
    162a:	90 40       	sbci	r25, 0x00	; 0
    162c:	a0 40       	sbci	r26, 0x00	; 0
    162e:	e1 f7       	brne	.-8      	; 0x1628 <beep_beep_buzzer+0x78>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <beep_beep_buzzer+0x82>
    1632:	00 00       	nop
	_delay_ms(50);
}
    1634:	08 95       	ret

00001636 <main>:


int main(void)
{
	init_devices();
    1636:	0e 94 9e 05 	call	0xb3c	; 0xb3c <init_devices>
	lcd_set_4bit();
    163a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    163e:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>
	
	//Setting up Servos for Default positions
	base_servo(30);
    1642:	8e e1       	ldi	r24, 0x1E	; 30
    1644:	0e 94 61 02 	call	0x4c2	; 0x4c2 <base_servo>
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    164c:	ac e2       	ldi	r26, 0x2C	; 44
    164e:	81 50       	subi	r24, 0x01	; 1
    1650:	90 40       	sbci	r25, 0x00	; 0
    1652:	a0 40       	sbci	r26, 0x00	; 0
    1654:	e1 f7       	brne	.-8      	; 0x164e <main+0x18>
    1656:	00 c0       	rjmp	.+0      	; 0x1658 <main+0x22>
    1658:	00 00       	nop
	_delay_ms(1000);
	servo_base_free();
    165a:	0e 94 93 02 	call	0x526	; 0x526 <servo_base_free>
	
	follow();//follow line
    165e:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
	while (1)
	{
		SlotFive = 0;
		SlotNine = 0;
		SlotThirteen = 0;
		src=2;
    1662:	c2 e0       	ldi	r28, 0x02	; 2
    1664:	d0 e0       	ldi	r29, 0x00	; 0
		stop();//stop
		base_servo(30);
		_delay_ms(1000);
		UDR0 = 'S';
    1666:	0f 2e       	mov	r0, r31
    1668:	f6 ec       	ldi	r31, 0xC6	; 198
    166a:	cf 2e       	mov	r12, r31
    166c:	dd 24       	eor	r13, r13
    166e:	f0 2d       	mov	r31, r0
    1670:	0f 2e       	mov	r0, r31
    1672:	f3 e5       	ldi	r31, 0x53	; 83
    1674:	ef 2e       	mov	r14, r31
    1676:	f0 2d       	mov	r31, r0
		{
			dest = 9;
		}
		else if (SlotThirteen == 0)
		{
			dest = 13;
    1678:	0f 2e       	mov	r0, r31
    167a:	fd e0       	ldi	r31, 0x0D	; 13
    167c:	4f 2e       	mov	r4, r31
    167e:	55 24       	eor	r5, r5
    1680:	f0 2d       	mov	r31, r0
		{
			dest = 5;
		}
		else if (SlotNine == 0)
		{
			dest = 9;
    1682:	0f 2e       	mov	r0, r31
    1684:	f9 e0       	ldi	r31, 0x09	; 9
    1686:	6f 2e       	mov	r6, r31
    1688:	77 24       	eor	r7, r7
    168a:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		UDR0 = 'S';
		_delay_ms(15);
		if (SlotFive == 0)
		{
			dest = 5;
    168c:	0f 2e       	mov	r0, r31
    168e:	f5 e0       	ldi	r31, 0x05	; 5
    1690:	8f 2e       	mov	r8, r31
    1692:	99 24       	eor	r9, r9
    1694:	f0 2d       	mov	r31, r0
			follow();
			forward_mm(50);
		}
		else 
		{
			memset(shortest_path,0,V); //Fill Shortest path with Zeroes
    1696:	09 eb       	ldi	r16, 0xB9	; 185
    1698:	14 e0       	ldi	r17, 0x04	; 4
    169a:	ff 24       	eor	r15, r15
    169c:	68 94       	set
    169e:	f4 f8       	bld	r15, 4
			djikstra(graph,src);
    16a0:	0f 2e       	mov	r0, r31
    16a2:	f0 e8       	ldi	r31, 0x80	; 128
    16a4:	af 2e       	mov	r10, r31
    16a6:	f2 e0       	ldi	r31, 0x02	; 2
    16a8:	bf 2e       	mov	r11, r31
    16aa:	f0 2d       	mov	r31, r0
	servo_base_free();
	
	follow();//follow line
	while (1)
	{
		SlotFive = 0;
    16ac:	10 92 de 04 	sts	0x04DE, r1
    16b0:	10 92 dd 04 	sts	0x04DD, r1
		SlotNine = 0;
    16b4:	10 92 dc 04 	sts	0x04DC, r1
    16b8:	10 92 db 04 	sts	0x04DB, r1
		SlotThirteen = 0;
    16bc:	10 92 da 04 	sts	0x04DA, r1
    16c0:	10 92 d9 04 	sts	0x04D9, r1
		src=2;
    16c4:	d0 93 8b 04 	sts	0x048B, r29
    16c8:	c0 93 8a 04 	sts	0x048A, r28
		stop();//stop
    16cc:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
		base_servo(30);
    16d0:	8e e1       	ldi	r24, 0x1E	; 30
    16d2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <base_servo>
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	9f ef       	ldi	r25, 0xFF	; 255
    16da:	ac e2       	ldi	r26, 0x2C	; 44
    16dc:	81 50       	subi	r24, 0x01	; 1
    16de:	90 40       	sbci	r25, 0x00	; 0
    16e0:	a0 40       	sbci	r26, 0x00	; 0
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <main+0xa6>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <main+0xb0>
    16e6:	00 00       	nop
		_delay_ms(1000);
		UDR0 = 'S';
    16e8:	d6 01       	movw	r26, r12
    16ea:	ec 92       	st	X, r14
    16ec:	ef ef       	ldi	r30, 0xFF	; 255
    16ee:	f7 ed       	ldi	r31, 0xD7	; 215
    16f0:	31 97       	sbiw	r30, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <main+0xba>
    16f4:	00 c0       	rjmp	.+0      	; 0x16f6 <main+0xc0>
    16f6:	00 00       	nop
		_delay_ms(15);
		if (SlotFive == 0)
    16f8:	80 91 dd 04 	lds	r24, 0x04DD
    16fc:	90 91 de 04 	lds	r25, 0x04DE
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	29 f4       	brne	.+10     	; 0x170e <main+0xd8>
		{
			dest = 5;
    1704:	90 92 e6 04 	sts	0x04E6, r9
    1708:	80 92 e5 04 	sts	0x04E5, r8
    170c:	15 c0       	rjmp	.+42     	; 0x1738 <main+0x102>
		}
		else if (SlotNine == 0)
    170e:	80 91 db 04 	lds	r24, 0x04DB
    1712:	90 91 dc 04 	lds	r25, 0x04DC
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	29 f4       	brne	.+10     	; 0x1724 <main+0xee>
		{
			dest = 9;
    171a:	70 92 e6 04 	sts	0x04E6, r7
    171e:	60 92 e5 04 	sts	0x04E5, r6
    1722:	0a c0       	rjmp	.+20     	; 0x1738 <main+0x102>
		}
		else if (SlotThirteen == 0)
    1724:	80 91 d9 04 	lds	r24, 0x04D9
    1728:	90 91 da 04 	lds	r25, 0x04DA
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	21 f4       	brne	.+8      	; 0x1738 <main+0x102>
		{
			dest = 13;
    1730:	50 92 e6 04 	sts	0x04E6, r5
    1734:	40 92 e5 04 	sts	0x04E5, r4
		}
		src=2;
    1738:	d0 93 8b 04 	sts	0x048B, r29
    173c:	c0 93 8a 04 	sts	0x048A, r28
		stop();
    1740:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
		lcd_print(2,12, src,2);
    1744:	40 91 8a 04 	lds	r20, 0x048A
    1748:	50 91 8b 04 	lds	r21, 0x048B
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	6c e0       	ldi	r22, 0x0C	; 12
    1750:	9e 01       	movw	r18, r28
    1752:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
		lcd_print(2,15, dest,2);
    1756:	40 91 e5 04 	lds	r20, 0x04E5
    175a:	50 91 e6 04 	lds	r21, 0x04E6
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	6f e0       	ldi	r22, 0x0F	; 15
    1762:	9e 01       	movw	r18, r28
    1764:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
		if (src == 2 && dest == 5)
    1768:	60 91 8a 04 	lds	r22, 0x048A
    176c:	70 91 8b 04 	lds	r23, 0x048B
    1770:	62 30       	cpi	r22, 0x02	; 2
    1772:	71 05       	cpc	r23, r1
    1774:	09 f0       	breq	.+2      	; 0x1778 <main+0x142>
    1776:	92 c0       	rjmp	.+292    	; 0x189c <main+0x266>
    1778:	80 91 e5 04 	lds	r24, 0x04E5
    177c:	90 91 e6 04 	lds	r25, 0x04E6
    1780:	85 30       	cpi	r24, 0x05	; 5
    1782:	91 05       	cpc	r25, r1
    1784:	09 f0       	breq	.+2      	; 0x1788 <main+0x152>
    1786:	47 c0       	rjmp	.+142    	; 0x1816 <main+0x1e0>
		{
			backward_mm(30);
    1788:	8e e1       	ldi	r24, 0x1E	; 30
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 10 05 	call	0xa20	; 0xa20 <backward_mm>
			turn_right(half_turn);
    1790:	80 91 86 04 	lds	r24, 0x0486
    1794:	90 91 87 04 	lds	r25, 0x0487
    1798:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
			follow();
    179c:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			stop();
    17a0:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
			beep_beep_buzzer();
    17a4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <beep_beep_buzzer>
			base_servo(90);
    17a8:	8a e5       	ldi	r24, 0x5A	; 90
    17aa:	0e 94 61 02 	call	0x4c2	; 0x4c2 <base_servo>
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	9f ef       	ldi	r25, 0xFF	; 255
    17b2:	ac e2       	ldi	r26, 0x2C	; 44
    17b4:	81 50       	subi	r24, 0x01	; 1
    17b6:	90 40       	sbci	r25, 0x00	; 0
    17b8:	a0 40       	sbci	r26, 0x00	; 0
    17ba:	e1 f7       	brne	.-8      	; 0x17b4 <main+0x17e>
    17bc:	00 c0       	rjmp	.+0      	; 0x17be <main+0x188>
    17be:	00 00       	nop
			_delay_ms(1000);
			memset(shortest_path,0,V);
    17c0:	d8 01       	movw	r26, r16
    17c2:	ef 2d       	mov	r30, r15
    17c4:	1d 92       	st	X+, r1
    17c6:	ea 95       	dec	r30
    17c8:	e9 f7       	brne	.-6      	; 0x17c4 <main+0x18e>
			back();
    17ca:	0e 94 3a 04 	call	0x874	; 0x874 <back>
			velocity(200,200);
    17ce:	88 ec       	ldi	r24, 0xC8	; 200
    17d0:	68 ec       	ldi	r22, 0xC8	; 200
    17d2:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
			backward_mm(120);
    17d6:	88 e7       	ldi	r24, 0x78	; 120
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 10 05 	call	0xa20	; 0xa20 <backward_mm>
			followback();
    17de:	0e 94 0a 08 	call	0x1014	; 0x1014 <followback>
			forward_mm(70);
    17e2:	86 e4       	ldi	r24, 0x46	; 70
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			turn_right(half_turn);
    17ea:	80 91 86 04 	lds	r24, 0x0486
    17ee:	90 91 87 04 	lds	r25, 0x0487
    17f2:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
			forward();
    17f6:	0e 94 36 04 	call	0x86c	; 0x86c <forward>
			follow();
    17fa:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			forward_mm(50);
    17fe:	82 e3       	ldi	r24, 0x32	; 50
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
		}
		
		if (src == 2 && dest == 7)
    1806:	60 91 8a 04 	lds	r22, 0x048A
    180a:	70 91 8b 04 	lds	r23, 0x048B
    180e:	62 30       	cpi	r22, 0x02	; 2
    1810:	71 05       	cpc	r23, r1
    1812:	09 f0       	breq	.+2      	; 0x1816 <main+0x1e0>
    1814:	43 c0       	rjmp	.+134    	; 0x189c <main+0x266>
    1816:	80 91 e5 04 	lds	r24, 0x04E5
    181a:	90 91 e6 04 	lds	r25, 0x04E6
    181e:	87 30       	cpi	r24, 0x07	; 7
    1820:	91 05       	cpc	r25, r1
    1822:	e1 f5       	brne	.+120    	; 0x189c <main+0x266>
		{
			turn_left(half_turn);
    1824:	80 91 86 04 	lds	r24, 0x0486
    1828:	90 91 87 04 	lds	r25, 0x0487
    182c:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
			follow();
    1830:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			stop();
    1834:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
			beep_beep_buzzer();
    1838:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <beep_beep_buzzer>
			base_servo(90);
    183c:	8a e5       	ldi	r24, 0x5A	; 90
    183e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <base_servo>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	ac e2       	ldi	r26, 0x2C	; 44
    1848:	81 50       	subi	r24, 0x01	; 1
    184a:	90 40       	sbci	r25, 0x00	; 0
    184c:	a0 40       	sbci	r26, 0x00	; 0
    184e:	e1 f7       	brne	.-8      	; 0x1848 <main+0x212>
    1850:	00 c0       	rjmp	.+0      	; 0x1852 <main+0x21c>
    1852:	00 00       	nop
			_delay_ms(1000);
			memset(shortest_path,0,V);
    1854:	d8 01       	movw	r26, r16
    1856:	ef 2d       	mov	r30, r15
    1858:	1d 92       	st	X+, r1
    185a:	ea 95       	dec	r30
    185c:	e9 f7       	brne	.-6      	; 0x1858 <main+0x222>
			back();
    185e:	0e 94 3a 04 	call	0x874	; 0x874 <back>
			velocity(200,200);
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	68 ec       	ldi	r22, 0xC8	; 200
    1866:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
			backward_mm(120);
    186a:	88 e7       	ldi	r24, 0x78	; 120
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 10 05 	call	0xa20	; 0xa20 <backward_mm>
			followback();
    1872:	0e 94 0a 08 	call	0x1014	; 0x1014 <followback>
			forward_mm(70);
    1876:	86 e4       	ldi	r24, 0x46	; 70
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			turn_left(half_turn);
    187e:	80 91 86 04 	lds	r24, 0x0486
    1882:	90 91 87 04 	lds	r25, 0x0487
    1886:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
			forward();
    188a:	0e 94 36 04 	call	0x86c	; 0x86c <forward>
			follow();
    188e:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			forward_mm(50);
    1892:	82 e3       	ldi	r24, 0x32	; 50
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			follow();
			forward_mm(50);
		}
		
		if (src == 2 && dest == 7)
		{
    189a:	4c c0       	rjmp	.+152    	; 0x1934 <main+0x2fe>
			follow();
			forward_mm(50);
		}
		else 
		{
			memset(shortest_path,0,V); //Fill Shortest path with Zeroes
    189c:	d8 01       	movw	r26, r16
    189e:	ef 2d       	mov	r30, r15
    18a0:	1d 92       	st	X+, r1
    18a2:	ea 95       	dec	r30
    18a4:	e9 f7       	brne	.-6      	; 0x18a0 <main+0x26a>
			djikstra(graph,src);
    18a6:	c5 01       	movw	r24, r10
    18a8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <djikstra>
			travel_path(shortest_path);
    18ac:	c8 01       	movw	r24, r16
    18ae:	0e 94 36 0a 	call	0x146c	; 0x146c <travel_path>
			stop();
    18b2:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
			beep_beep_buzzer();
    18b6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <beep_beep_buzzer>
			base_servo(90);
    18ba:	8a e5       	ldi	r24, 0x5A	; 90
    18bc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <base_servo>
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	9f ef       	ldi	r25, 0xFF	; 255
    18c4:	ac e2       	ldi	r26, 0x2C	; 44
    18c6:	81 50       	subi	r24, 0x01	; 1
    18c8:	90 40       	sbci	r25, 0x00	; 0
    18ca:	a0 40       	sbci	r26, 0x00	; 0
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <main+0x290>
    18ce:	00 c0       	rjmp	.+0      	; 0x18d0 <main+0x29a>
    18d0:	00 00       	nop
			_delay_ms(1000);
			memset(shortest_path,0,V);
    18d2:	d8 01       	movw	r26, r16
    18d4:	ef 2d       	mov	r30, r15
    18d6:	1d 92       	st	X+, r1
    18d8:	ea 95       	dec	r30
    18da:	e9 f7       	brne	.-6      	; 0x18d6 <main+0x2a0>
			back();
    18dc:	0e 94 3a 04 	call	0x874	; 0x874 <back>
			velocity(200,200);
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	68 ec       	ldi	r22, 0xC8	; 200
    18e4:	0e 94 99 05 	call	0xb32	; 0xb32 <velocity>
			backward_mm(120);
    18e8:	88 e7       	ldi	r24, 0x78	; 120
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 10 05 	call	0xa20	; 0xa20 <backward_mm>
			followback();
    18f0:	0e 94 0a 08 	call	0x1014	; 0x1014 <followback>
			forward_mm(70);
    18f4:	86 e4       	ldi	r24, 0x46	; 70
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			lcd_print(2,12, src,2);
    18fc:	40 91 8a 04 	lds	r20, 0x048A
    1900:	50 91 8b 04 	lds	r21, 0x048B
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	6c e0       	ldi	r22, 0x0C	; 12
    1908:	9e 01       	movw	r18, r28
    190a:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
			lcd_print(2,15, dest,2);
    190e:	40 91 e5 04 	lds	r20, 0x04E5
    1912:	50 91 e6 04 	lds	r21, 0x04E6
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	6f e0       	ldi	r22, 0x0F	; 15
    191a:	9e 01       	movw	r18, r28
    191c:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
			lcd_print(2,9,8,1);
    1920:	82 e0       	ldi	r24, 0x02	; 2
    1922:	69 e0       	ldi	r22, 0x09	; 9
    1924:	48 e0       	ldi	r20, 0x08	; 8
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	21 e0       	ldi	r18, 0x01	; 1
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
			stop();
    1930:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
		}		
		switch(src)
    1934:	80 91 8a 04 	lds	r24, 0x048A
    1938:	90 91 8b 04 	lds	r25, 0x048B
    193c:	8b 30       	cpi	r24, 0x0B	; 11
    193e:	91 05       	cpc	r25, r1
    1940:	09 f1       	breq	.+66     	; 0x1984 <main+0x34e>
    1942:	8c 30       	cpi	r24, 0x0C	; 12
    1944:	91 05       	cpc	r25, r1
    1946:	2c f4       	brge	.+10     	; 0x1952 <main+0x31c>
    1948:	89 30       	cpi	r24, 0x09	; 9
    194a:	91 05       	cpc	r25, r1
    194c:	09 f0       	breq	.+2      	; 0x1950 <main+0x31a>
    194e:	50 c0       	rjmp	.+160    	; 0x19f0 <main+0x3ba>
    1950:	08 c0       	rjmp	.+16     	; 0x1962 <main+0x32c>
    1952:	8d 30       	cpi	r24, 0x0D	; 13
    1954:	91 05       	cpc	r25, r1
    1956:	39 f1       	breq	.+78     	; 0x19a6 <main+0x370>
    1958:	8f 30       	cpi	r24, 0x0F	; 15
    195a:	91 05       	cpc	r25, r1
    195c:	09 f0       	breq	.+2      	; 0x1960 <main+0x32a>
    195e:	48 c0       	rjmp	.+144    	; 0x19f0 <main+0x3ba>
    1960:	35 c0       	rjmp	.+106    	; 0x19cc <main+0x396>
		{	
			case 9:
			turn_right(half_turn);
    1962:	80 91 86 04 	lds	r24, 0x0486
    1966:	90 91 87 04 	lds	r25, 0x0487
    196a:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
			forward();
    196e:	0e 94 36 04 	call	0x86c	; 0x86c <forward>
			follow();
    1972:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			follow();
    1976:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			forward_mm(50);
    197a:	82 e3       	ldi	r24, 0x32	; 50
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			break;
    1982:	36 c0       	rjmp	.+108    	; 0x19f0 <main+0x3ba>
			
			case 11:
			turn_left(half_turn);
    1984:	80 91 86 04 	lds	r24, 0x0486
    1988:	90 91 87 04 	lds	r25, 0x0487
    198c:	0e 94 b9 05 	call	0xb72	; 0xb72 <turn_left>
			forward();
    1990:	0e 94 36 04 	call	0x86c	; 0x86c <forward>
			follow();
    1994:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			follow();
    1998:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			forward_mm(50);
    199c:	82 e3       	ldi	r24, 0x32	; 50
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			break;
    19a4:	25 c0       	rjmp	.+74     	; 0x19f0 <main+0x3ba>
			
			case 13:
			turn_right(half_turn);
    19a6:	80 91 86 04 	lds	r24, 0x0486
    19aa:	90 91 87 04 	lds	r25, 0x0487
    19ae:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
			forward();
    19b2:	0e 94 36 04 	call	0x86c	; 0x86c <forward>
			follow();
    19b6:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			follow();
    19ba:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			follow();
    19be:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			forward_mm(50);
    19c2:	82 e3       	ldi	r24, 0x32	; 50
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			break;
    19ca:	12 c0       	rjmp	.+36     	; 0x19f0 <main+0x3ba>
			
			case 15:
			turn_right(half_turn);
    19cc:	80 91 86 04 	lds	r24, 0x0486
    19d0:	90 91 87 04 	lds	r25, 0x0487
    19d4:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
			forward();
    19d8:	0e 94 36 04 	call	0x86c	; 0x86c <forward>
			follow();
    19dc:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			follow();
    19e0:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			follow();
    19e4:	0e 94 91 07 	call	0xf22	; 0xf22 <follow>
			forward_mm(50);
    19e8:	82 e3       	ldi	r24, 0x32	; 50
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 05 05 	call	0xa0a	; 0xa0a <forward_mm>
			break;
		}	
		turn_right(180);
    19f0:	84 eb       	ldi	r24, 0xB4	; 180
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 ed 05 	call	0xbda	; 0xbda <turn_right>
		stop();
    19f8:	0e 94 4e 04 	call	0x89c	; 0x89c <stop>
	}
    19fc:	57 ce       	rjmp	.-850    	; 0x16ac <main+0x76>

000019fe <__subsf3>:
    19fe:	50 58       	subi	r21, 0x80	; 128

00001a00 <__addsf3>:
    1a00:	bb 27       	eor	r27, r27
    1a02:	aa 27       	eor	r26, r26
    1a04:	0e d0       	rcall	.+28     	; 0x1a22 <__addsf3x>
    1a06:	4d c1       	rjmp	.+666    	; 0x1ca2 <__fp_round>
    1a08:	3e d1       	rcall	.+636    	; 0x1c86 <__fp_pscA>
    1a0a:	30 f0       	brcs	.+12     	; 0x1a18 <__addsf3+0x18>
    1a0c:	43 d1       	rcall	.+646    	; 0x1c94 <__fp_pscB>
    1a0e:	20 f0       	brcs	.+8      	; 0x1a18 <__addsf3+0x18>
    1a10:	31 f4       	brne	.+12     	; 0x1a1e <__addsf3+0x1e>
    1a12:	9f 3f       	cpi	r25, 0xFF	; 255
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <__addsf3+0x1a>
    1a16:	1e f4       	brtc	.+6      	; 0x1a1e <__addsf3+0x1e>
    1a18:	33 c1       	rjmp	.+614    	; 0x1c80 <__fp_nan>
    1a1a:	0e f4       	brtc	.+2      	; 0x1a1e <__addsf3+0x1e>
    1a1c:	e0 95       	com	r30
    1a1e:	e7 fb       	bst	r30, 7
    1a20:	29 c1       	rjmp	.+594    	; 0x1c74 <__fp_inf>

00001a22 <__addsf3x>:
    1a22:	e9 2f       	mov	r30, r25
    1a24:	4f d1       	rcall	.+670    	; 0x1cc4 <__fp_split3>
    1a26:	80 f3       	brcs	.-32     	; 0x1a08 <__addsf3+0x8>
    1a28:	ba 17       	cp	r27, r26
    1a2a:	62 07       	cpc	r22, r18
    1a2c:	73 07       	cpc	r23, r19
    1a2e:	84 07       	cpc	r24, r20
    1a30:	95 07       	cpc	r25, r21
    1a32:	18 f0       	brcs	.+6      	; 0x1a3a <__addsf3x+0x18>
    1a34:	71 f4       	brne	.+28     	; 0x1a52 <__addsf3x+0x30>
    1a36:	9e f5       	brtc	.+102    	; 0x1a9e <__addsf3x+0x7c>
    1a38:	67 c1       	rjmp	.+718    	; 0x1d08 <__fp_zero>
    1a3a:	0e f4       	brtc	.+2      	; 0x1a3e <__addsf3x+0x1c>
    1a3c:	e0 95       	com	r30
    1a3e:	0b 2e       	mov	r0, r27
    1a40:	ba 2f       	mov	r27, r26
    1a42:	a0 2d       	mov	r26, r0
    1a44:	0b 01       	movw	r0, r22
    1a46:	b9 01       	movw	r22, r18
    1a48:	90 01       	movw	r18, r0
    1a4a:	0c 01       	movw	r0, r24
    1a4c:	ca 01       	movw	r24, r20
    1a4e:	a0 01       	movw	r20, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	ff 27       	eor	r31, r31
    1a54:	59 1b       	sub	r21, r25
    1a56:	99 f0       	breq	.+38     	; 0x1a7e <__addsf3x+0x5c>
    1a58:	59 3f       	cpi	r21, 0xF9	; 249
    1a5a:	50 f4       	brcc	.+20     	; 0x1a70 <__addsf3x+0x4e>
    1a5c:	50 3e       	cpi	r21, 0xE0	; 224
    1a5e:	68 f1       	brcs	.+90     	; 0x1aba <__addsf3x+0x98>
    1a60:	1a 16       	cp	r1, r26
    1a62:	f0 40       	sbci	r31, 0x00	; 0
    1a64:	a2 2f       	mov	r26, r18
    1a66:	23 2f       	mov	r18, r19
    1a68:	34 2f       	mov	r19, r20
    1a6a:	44 27       	eor	r20, r20
    1a6c:	58 5f       	subi	r21, 0xF8	; 248
    1a6e:	f3 cf       	rjmp	.-26     	; 0x1a56 <__addsf3x+0x34>
    1a70:	46 95       	lsr	r20
    1a72:	37 95       	ror	r19
    1a74:	27 95       	ror	r18
    1a76:	a7 95       	ror	r26
    1a78:	f0 40       	sbci	r31, 0x00	; 0
    1a7a:	53 95       	inc	r21
    1a7c:	c9 f7       	brne	.-14     	; 0x1a70 <__addsf3x+0x4e>
    1a7e:	7e f4       	brtc	.+30     	; 0x1a9e <__addsf3x+0x7c>
    1a80:	1f 16       	cp	r1, r31
    1a82:	ba 0b       	sbc	r27, r26
    1a84:	62 0b       	sbc	r22, r18
    1a86:	73 0b       	sbc	r23, r19
    1a88:	84 0b       	sbc	r24, r20
    1a8a:	ba f0       	brmi	.+46     	; 0x1aba <__addsf3x+0x98>
    1a8c:	91 50       	subi	r25, 0x01	; 1
    1a8e:	a1 f0       	breq	.+40     	; 0x1ab8 <__addsf3x+0x96>
    1a90:	ff 0f       	add	r31, r31
    1a92:	bb 1f       	adc	r27, r27
    1a94:	66 1f       	adc	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	c2 f7       	brpl	.-16     	; 0x1a8c <__addsf3x+0x6a>
    1a9c:	0e c0       	rjmp	.+28     	; 0x1aba <__addsf3x+0x98>
    1a9e:	ba 0f       	add	r27, r26
    1aa0:	62 1f       	adc	r22, r18
    1aa2:	73 1f       	adc	r23, r19
    1aa4:	84 1f       	adc	r24, r20
    1aa6:	48 f4       	brcc	.+18     	; 0x1aba <__addsf3x+0x98>
    1aa8:	87 95       	ror	r24
    1aaa:	77 95       	ror	r23
    1aac:	67 95       	ror	r22
    1aae:	b7 95       	ror	r27
    1ab0:	f7 95       	ror	r31
    1ab2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <__addsf3x+0x96>
    1ab6:	b3 cf       	rjmp	.-154    	; 0x1a1e <__addsf3+0x1e>
    1ab8:	93 95       	inc	r25
    1aba:	88 0f       	add	r24, r24
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <__addsf3x+0x9e>
    1abe:	99 27       	eor	r25, r25
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	97 95       	ror	r25
    1ac4:	87 95       	ror	r24
    1ac6:	08 95       	ret

00001ac8 <__divsf3>:
    1ac8:	0c d0       	rcall	.+24     	; 0x1ae2 <__divsf3x>
    1aca:	eb c0       	rjmp	.+470    	; 0x1ca2 <__fp_round>
    1acc:	e3 d0       	rcall	.+454    	; 0x1c94 <__fp_pscB>
    1ace:	40 f0       	brcs	.+16     	; 0x1ae0 <__divsf3+0x18>
    1ad0:	da d0       	rcall	.+436    	; 0x1c86 <__fp_pscA>
    1ad2:	30 f0       	brcs	.+12     	; 0x1ae0 <__divsf3+0x18>
    1ad4:	21 f4       	brne	.+8      	; 0x1ade <__divsf3+0x16>
    1ad6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <__divsf3+0x18>
    1ada:	cc c0       	rjmp	.+408    	; 0x1c74 <__fp_inf>
    1adc:	51 11       	cpse	r21, r1
    1ade:	15 c1       	rjmp	.+554    	; 0x1d0a <__fp_szero>
    1ae0:	cf c0       	rjmp	.+414    	; 0x1c80 <__fp_nan>

00001ae2 <__divsf3x>:
    1ae2:	f0 d0       	rcall	.+480    	; 0x1cc4 <__fp_split3>
    1ae4:	98 f3       	brcs	.-26     	; 0x1acc <__divsf3+0x4>

00001ae6 <__divsf3_pse>:
    1ae6:	99 23       	and	r25, r25
    1ae8:	c9 f3       	breq	.-14     	; 0x1adc <__divsf3+0x14>
    1aea:	55 23       	and	r21, r21
    1aec:	b1 f3       	breq	.-20     	; 0x1ada <__divsf3+0x12>
    1aee:	95 1b       	sub	r25, r21
    1af0:	55 0b       	sbc	r21, r21
    1af2:	bb 27       	eor	r27, r27
    1af4:	aa 27       	eor	r26, r26
    1af6:	62 17       	cp	r22, r18
    1af8:	73 07       	cpc	r23, r19
    1afa:	84 07       	cpc	r24, r20
    1afc:	38 f0       	brcs	.+14     	; 0x1b0c <__divsf3_pse+0x26>
    1afe:	9f 5f       	subi	r25, 0xFF	; 255
    1b00:	5f 4f       	sbci	r21, 0xFF	; 255
    1b02:	22 0f       	add	r18, r18
    1b04:	33 1f       	adc	r19, r19
    1b06:	44 1f       	adc	r20, r20
    1b08:	aa 1f       	adc	r26, r26
    1b0a:	a9 f3       	breq	.-22     	; 0x1af6 <__divsf3_pse+0x10>
    1b0c:	33 d0       	rcall	.+102    	; 0x1b74 <__divsf3_pse+0x8e>
    1b0e:	0e 2e       	mov	r0, r30
    1b10:	3a f0       	brmi	.+14     	; 0x1b20 <__divsf3_pse+0x3a>
    1b12:	e0 e8       	ldi	r30, 0x80	; 128
    1b14:	30 d0       	rcall	.+96     	; 0x1b76 <__divsf3_pse+0x90>
    1b16:	91 50       	subi	r25, 0x01	; 1
    1b18:	50 40       	sbci	r21, 0x00	; 0
    1b1a:	e6 95       	lsr	r30
    1b1c:	00 1c       	adc	r0, r0
    1b1e:	ca f7       	brpl	.-14     	; 0x1b12 <__divsf3_pse+0x2c>
    1b20:	29 d0       	rcall	.+82     	; 0x1b74 <__divsf3_pse+0x8e>
    1b22:	fe 2f       	mov	r31, r30
    1b24:	27 d0       	rcall	.+78     	; 0x1b74 <__divsf3_pse+0x8e>
    1b26:	66 0f       	add	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	26 17       	cp	r18, r22
    1b30:	37 07       	cpc	r19, r23
    1b32:	48 07       	cpc	r20, r24
    1b34:	ab 07       	cpc	r26, r27
    1b36:	b0 e8       	ldi	r27, 0x80	; 128
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <__divsf3_pse+0x56>
    1b3a:	bb 0b       	sbc	r27, r27
    1b3c:	80 2d       	mov	r24, r0
    1b3e:	bf 01       	movw	r22, r30
    1b40:	ff 27       	eor	r31, r31
    1b42:	93 58       	subi	r25, 0x83	; 131
    1b44:	5f 4f       	sbci	r21, 0xFF	; 255
    1b46:	2a f0       	brmi	.+10     	; 0x1b52 <__divsf3_pse+0x6c>
    1b48:	9e 3f       	cpi	r25, 0xFE	; 254
    1b4a:	51 05       	cpc	r21, r1
    1b4c:	68 f0       	brcs	.+26     	; 0x1b68 <__divsf3_pse+0x82>
    1b4e:	92 c0       	rjmp	.+292    	; 0x1c74 <__fp_inf>
    1b50:	dc c0       	rjmp	.+440    	; 0x1d0a <__fp_szero>
    1b52:	5f 3f       	cpi	r21, 0xFF	; 255
    1b54:	ec f3       	brlt	.-6      	; 0x1b50 <__divsf3_pse+0x6a>
    1b56:	98 3e       	cpi	r25, 0xE8	; 232
    1b58:	dc f3       	brlt	.-10     	; 0x1b50 <__divsf3_pse+0x6a>
    1b5a:	86 95       	lsr	r24
    1b5c:	77 95       	ror	r23
    1b5e:	67 95       	ror	r22
    1b60:	b7 95       	ror	r27
    1b62:	f7 95       	ror	r31
    1b64:	9f 5f       	subi	r25, 0xFF	; 255
    1b66:	c9 f7       	brne	.-14     	; 0x1b5a <__divsf3_pse+0x74>
    1b68:	88 0f       	add	r24, r24
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	96 95       	lsr	r25
    1b6e:	87 95       	ror	r24
    1b70:	97 f9       	bld	r25, 7
    1b72:	08 95       	ret
    1b74:	e1 e0       	ldi	r30, 0x01	; 1
    1b76:	66 0f       	add	r22, r22
    1b78:	77 1f       	adc	r23, r23
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	bb 1f       	adc	r27, r27
    1b7e:	62 17       	cp	r22, r18
    1b80:	73 07       	cpc	r23, r19
    1b82:	84 07       	cpc	r24, r20
    1b84:	ba 07       	cpc	r27, r26
    1b86:	20 f0       	brcs	.+8      	; 0x1b90 <__divsf3_pse+0xaa>
    1b88:	62 1b       	sub	r22, r18
    1b8a:	73 0b       	sbc	r23, r19
    1b8c:	84 0b       	sbc	r24, r20
    1b8e:	ba 0b       	sbc	r27, r26
    1b90:	ee 1f       	adc	r30, r30
    1b92:	88 f7       	brcc	.-30     	; 0x1b76 <__divsf3_pse+0x90>
    1b94:	e0 95       	com	r30
    1b96:	08 95       	ret

00001b98 <__fixsfsi>:
    1b98:	04 d0       	rcall	.+8      	; 0x1ba2 <__fixunssfsi>
    1b9a:	68 94       	set
    1b9c:	b1 11       	cpse	r27, r1
    1b9e:	b5 c0       	rjmp	.+362    	; 0x1d0a <__fp_szero>
    1ba0:	08 95       	ret

00001ba2 <__fixunssfsi>:
    1ba2:	98 d0       	rcall	.+304    	; 0x1cd4 <__fp_splitA>
    1ba4:	88 f0       	brcs	.+34     	; 0x1bc8 <__fixunssfsi+0x26>
    1ba6:	9f 57       	subi	r25, 0x7F	; 127
    1ba8:	90 f0       	brcs	.+36     	; 0x1bce <__fixunssfsi+0x2c>
    1baa:	b9 2f       	mov	r27, r25
    1bac:	99 27       	eor	r25, r25
    1bae:	b7 51       	subi	r27, 0x17	; 23
    1bb0:	a0 f0       	brcs	.+40     	; 0x1bda <__fixunssfsi+0x38>
    1bb2:	d1 f0       	breq	.+52     	; 0x1be8 <__fixunssfsi+0x46>
    1bb4:	66 0f       	add	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	1a f0       	brmi	.+6      	; 0x1bc4 <__fixunssfsi+0x22>
    1bbe:	ba 95       	dec	r27
    1bc0:	c9 f7       	brne	.-14     	; 0x1bb4 <__fixunssfsi+0x12>
    1bc2:	12 c0       	rjmp	.+36     	; 0x1be8 <__fixunssfsi+0x46>
    1bc4:	b1 30       	cpi	r27, 0x01	; 1
    1bc6:	81 f0       	breq	.+32     	; 0x1be8 <__fixunssfsi+0x46>
    1bc8:	9f d0       	rcall	.+318    	; 0x1d08 <__fp_zero>
    1bca:	b1 e0       	ldi	r27, 0x01	; 1
    1bcc:	08 95       	ret
    1bce:	9c c0       	rjmp	.+312    	; 0x1d08 <__fp_zero>
    1bd0:	67 2f       	mov	r22, r23
    1bd2:	78 2f       	mov	r23, r24
    1bd4:	88 27       	eor	r24, r24
    1bd6:	b8 5f       	subi	r27, 0xF8	; 248
    1bd8:	39 f0       	breq	.+14     	; 0x1be8 <__fixunssfsi+0x46>
    1bda:	b9 3f       	cpi	r27, 0xF9	; 249
    1bdc:	cc f3       	brlt	.-14     	; 0x1bd0 <__fixunssfsi+0x2e>
    1bde:	86 95       	lsr	r24
    1be0:	77 95       	ror	r23
    1be2:	67 95       	ror	r22
    1be4:	b3 95       	inc	r27
    1be6:	d9 f7       	brne	.-10     	; 0x1bde <__fixunssfsi+0x3c>
    1be8:	3e f4       	brtc	.+14     	; 0x1bf8 <__fixunssfsi+0x56>
    1bea:	90 95       	com	r25
    1bec:	80 95       	com	r24
    1bee:	70 95       	com	r23
    1bf0:	61 95       	neg	r22
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	08 95       	ret

00001bfa <__floatunsisf>:
    1bfa:	e8 94       	clt
    1bfc:	09 c0       	rjmp	.+18     	; 0x1c10 <__floatsisf+0x12>

00001bfe <__floatsisf>:
    1bfe:	97 fb       	bst	r25, 7
    1c00:	3e f4       	brtc	.+14     	; 0x1c10 <__floatsisf+0x12>
    1c02:	90 95       	com	r25
    1c04:	80 95       	com	r24
    1c06:	70 95       	com	r23
    1c08:	61 95       	neg	r22
    1c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c10:	99 23       	and	r25, r25
    1c12:	a9 f0       	breq	.+42     	; 0x1c3e <__floatsisf+0x40>
    1c14:	f9 2f       	mov	r31, r25
    1c16:	96 e9       	ldi	r25, 0x96	; 150
    1c18:	bb 27       	eor	r27, r27
    1c1a:	93 95       	inc	r25
    1c1c:	f6 95       	lsr	r31
    1c1e:	87 95       	ror	r24
    1c20:	77 95       	ror	r23
    1c22:	67 95       	ror	r22
    1c24:	b7 95       	ror	r27
    1c26:	f1 11       	cpse	r31, r1
    1c28:	f8 cf       	rjmp	.-16     	; 0x1c1a <__floatsisf+0x1c>
    1c2a:	fa f4       	brpl	.+62     	; 0x1c6a <__floatsisf+0x6c>
    1c2c:	bb 0f       	add	r27, r27
    1c2e:	11 f4       	brne	.+4      	; 0x1c34 <__floatsisf+0x36>
    1c30:	60 ff       	sbrs	r22, 0
    1c32:	1b c0       	rjmp	.+54     	; 0x1c6a <__floatsisf+0x6c>
    1c34:	6f 5f       	subi	r22, 0xFF	; 255
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	16 c0       	rjmp	.+44     	; 0x1c6a <__floatsisf+0x6c>
    1c3e:	88 23       	and	r24, r24
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <__floatsisf+0x48>
    1c42:	96 e9       	ldi	r25, 0x96	; 150
    1c44:	11 c0       	rjmp	.+34     	; 0x1c68 <__floatsisf+0x6a>
    1c46:	77 23       	and	r23, r23
    1c48:	21 f0       	breq	.+8      	; 0x1c52 <__floatsisf+0x54>
    1c4a:	9e e8       	ldi	r25, 0x8E	; 142
    1c4c:	87 2f       	mov	r24, r23
    1c4e:	76 2f       	mov	r23, r22
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <__floatsisf+0x5e>
    1c52:	66 23       	and	r22, r22
    1c54:	71 f0       	breq	.+28     	; 0x1c72 <__floatsisf+0x74>
    1c56:	96 e8       	ldi	r25, 0x86	; 134
    1c58:	86 2f       	mov	r24, r22
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	2a f0       	brmi	.+10     	; 0x1c6a <__floatsisf+0x6c>
    1c60:	9a 95       	dec	r25
    1c62:	66 0f       	add	r22, r22
    1c64:	77 1f       	adc	r23, r23
    1c66:	88 1f       	adc	r24, r24
    1c68:	da f7       	brpl	.-10     	; 0x1c60 <__floatsisf+0x62>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	96 95       	lsr	r25
    1c6e:	87 95       	ror	r24
    1c70:	97 f9       	bld	r25, 7
    1c72:	08 95       	ret

00001c74 <__fp_inf>:
    1c74:	97 f9       	bld	r25, 7
    1c76:	9f 67       	ori	r25, 0x7F	; 127
    1c78:	80 e8       	ldi	r24, 0x80	; 128
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	08 95       	ret

00001c80 <__fp_nan>:
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
    1c82:	80 ec       	ldi	r24, 0xC0	; 192
    1c84:	08 95       	ret

00001c86 <__fp_pscA>:
    1c86:	00 24       	eor	r0, r0
    1c88:	0a 94       	dec	r0
    1c8a:	16 16       	cp	r1, r22
    1c8c:	17 06       	cpc	r1, r23
    1c8e:	18 06       	cpc	r1, r24
    1c90:	09 06       	cpc	r0, r25
    1c92:	08 95       	ret

00001c94 <__fp_pscB>:
    1c94:	00 24       	eor	r0, r0
    1c96:	0a 94       	dec	r0
    1c98:	12 16       	cp	r1, r18
    1c9a:	13 06       	cpc	r1, r19
    1c9c:	14 06       	cpc	r1, r20
    1c9e:	05 06       	cpc	r0, r21
    1ca0:	08 95       	ret

00001ca2 <__fp_round>:
    1ca2:	09 2e       	mov	r0, r25
    1ca4:	03 94       	inc	r0
    1ca6:	00 0c       	add	r0, r0
    1ca8:	11 f4       	brne	.+4      	; 0x1cae <__fp_round+0xc>
    1caa:	88 23       	and	r24, r24
    1cac:	52 f0       	brmi	.+20     	; 0x1cc2 <__fp_round+0x20>
    1cae:	bb 0f       	add	r27, r27
    1cb0:	40 f4       	brcc	.+16     	; 0x1cc2 <__fp_round+0x20>
    1cb2:	bf 2b       	or	r27, r31
    1cb4:	11 f4       	brne	.+4      	; 0x1cba <__fp_round+0x18>
    1cb6:	60 ff       	sbrs	r22, 0
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <__fp_round+0x20>
    1cba:	6f 5f       	subi	r22, 0xFF	; 255
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	08 95       	ret

00001cc4 <__fp_split3>:
    1cc4:	57 fd       	sbrc	r21, 7
    1cc6:	90 58       	subi	r25, 0x80	; 128
    1cc8:	44 0f       	add	r20, r20
    1cca:	55 1f       	adc	r21, r21
    1ccc:	59 f0       	breq	.+22     	; 0x1ce4 <__fp_splitA+0x10>
    1cce:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd0:	71 f0       	breq	.+28     	; 0x1cee <__fp_splitA+0x1a>
    1cd2:	47 95       	ror	r20

00001cd4 <__fp_splitA>:
    1cd4:	88 0f       	add	r24, r24
    1cd6:	97 fb       	bst	r25, 7
    1cd8:	99 1f       	adc	r25, r25
    1cda:	61 f0       	breq	.+24     	; 0x1cf4 <__fp_splitA+0x20>
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	79 f0       	breq	.+30     	; 0x1cfe <__fp_splitA+0x2a>
    1ce0:	87 95       	ror	r24
    1ce2:	08 95       	ret
    1ce4:	12 16       	cp	r1, r18
    1ce6:	13 06       	cpc	r1, r19
    1ce8:	14 06       	cpc	r1, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	f2 cf       	rjmp	.-28     	; 0x1cd2 <__fp_split3+0xe>
    1cee:	46 95       	lsr	r20
    1cf0:	f1 df       	rcall	.-30     	; 0x1cd4 <__fp_splitA>
    1cf2:	08 c0       	rjmp	.+16     	; 0x1d04 <__fp_splitA+0x30>
    1cf4:	16 16       	cp	r1, r22
    1cf6:	17 06       	cpc	r1, r23
    1cf8:	18 06       	cpc	r1, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	f1 cf       	rjmp	.-30     	; 0x1ce0 <__fp_splitA+0xc>
    1cfe:	86 95       	lsr	r24
    1d00:	71 05       	cpc	r23, r1
    1d02:	61 05       	cpc	r22, r1
    1d04:	08 94       	sec
    1d06:	08 95       	ret

00001d08 <__fp_zero>:
    1d08:	e8 94       	clt

00001d0a <__fp_szero>:
    1d0a:	bb 27       	eor	r27, r27
    1d0c:	66 27       	eor	r22, r22
    1d0e:	77 27       	eor	r23, r23
    1d10:	cb 01       	movw	r24, r22
    1d12:	97 f9       	bld	r25, 7
    1d14:	08 95       	ret

00001d16 <__mulsf3>:
    1d16:	0b d0       	rcall	.+22     	; 0x1d2e <__mulsf3x>
    1d18:	c4 cf       	rjmp	.-120    	; 0x1ca2 <__fp_round>
    1d1a:	b5 df       	rcall	.-150    	; 0x1c86 <__fp_pscA>
    1d1c:	28 f0       	brcs	.+10     	; 0x1d28 <__mulsf3+0x12>
    1d1e:	ba df       	rcall	.-140    	; 0x1c94 <__fp_pscB>
    1d20:	18 f0       	brcs	.+6      	; 0x1d28 <__mulsf3+0x12>
    1d22:	95 23       	and	r25, r21
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <__mulsf3+0x12>
    1d26:	a6 cf       	rjmp	.-180    	; 0x1c74 <__fp_inf>
    1d28:	ab cf       	rjmp	.-170    	; 0x1c80 <__fp_nan>
    1d2a:	11 24       	eor	r1, r1
    1d2c:	ee cf       	rjmp	.-36     	; 0x1d0a <__fp_szero>

00001d2e <__mulsf3x>:
    1d2e:	ca df       	rcall	.-108    	; 0x1cc4 <__fp_split3>
    1d30:	a0 f3       	brcs	.-24     	; 0x1d1a <__mulsf3+0x4>

00001d32 <__mulsf3_pse>:
    1d32:	95 9f       	mul	r25, r21
    1d34:	d1 f3       	breq	.-12     	; 0x1d2a <__mulsf3+0x14>
    1d36:	95 0f       	add	r25, r21
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	55 1f       	adc	r21, r21
    1d3c:	62 9f       	mul	r22, r18
    1d3e:	f0 01       	movw	r30, r0
    1d40:	72 9f       	mul	r23, r18
    1d42:	bb 27       	eor	r27, r27
    1d44:	f0 0d       	add	r31, r0
    1d46:	b1 1d       	adc	r27, r1
    1d48:	63 9f       	mul	r22, r19
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	f0 0d       	add	r31, r0
    1d4e:	b1 1d       	adc	r27, r1
    1d50:	aa 1f       	adc	r26, r26
    1d52:	64 9f       	mul	r22, r20
    1d54:	66 27       	eor	r22, r22
    1d56:	b0 0d       	add	r27, r0
    1d58:	a1 1d       	adc	r26, r1
    1d5a:	66 1f       	adc	r22, r22
    1d5c:	82 9f       	mul	r24, r18
    1d5e:	22 27       	eor	r18, r18
    1d60:	b0 0d       	add	r27, r0
    1d62:	a1 1d       	adc	r26, r1
    1d64:	62 1f       	adc	r22, r18
    1d66:	73 9f       	mul	r23, r19
    1d68:	b0 0d       	add	r27, r0
    1d6a:	a1 1d       	adc	r26, r1
    1d6c:	62 1f       	adc	r22, r18
    1d6e:	83 9f       	mul	r24, r19
    1d70:	a0 0d       	add	r26, r0
    1d72:	61 1d       	adc	r22, r1
    1d74:	22 1f       	adc	r18, r18
    1d76:	74 9f       	mul	r23, r20
    1d78:	33 27       	eor	r19, r19
    1d7a:	a0 0d       	add	r26, r0
    1d7c:	61 1d       	adc	r22, r1
    1d7e:	23 1f       	adc	r18, r19
    1d80:	84 9f       	mul	r24, r20
    1d82:	60 0d       	add	r22, r0
    1d84:	21 1d       	adc	r18, r1
    1d86:	82 2f       	mov	r24, r18
    1d88:	76 2f       	mov	r23, r22
    1d8a:	6a 2f       	mov	r22, r26
    1d8c:	11 24       	eor	r1, r1
    1d8e:	9f 57       	subi	r25, 0x7F	; 127
    1d90:	50 40       	sbci	r21, 0x00	; 0
    1d92:	8a f0       	brmi	.+34     	; 0x1db6 <__mulsf3_pse+0x84>
    1d94:	e1 f0       	breq	.+56     	; 0x1dce <__mulsf3_pse+0x9c>
    1d96:	88 23       	and	r24, r24
    1d98:	4a f0       	brmi	.+18     	; 0x1dac <__mulsf3_pse+0x7a>
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	66 1f       	adc	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	91 50       	subi	r25, 0x01	; 1
    1da8:	50 40       	sbci	r21, 0x00	; 0
    1daa:	a9 f7       	brne	.-22     	; 0x1d96 <__mulsf3_pse+0x64>
    1dac:	9e 3f       	cpi	r25, 0xFE	; 254
    1dae:	51 05       	cpc	r21, r1
    1db0:	70 f0       	brcs	.+28     	; 0x1dce <__mulsf3_pse+0x9c>
    1db2:	60 cf       	rjmp	.-320    	; 0x1c74 <__fp_inf>
    1db4:	aa cf       	rjmp	.-172    	; 0x1d0a <__fp_szero>
    1db6:	5f 3f       	cpi	r21, 0xFF	; 255
    1db8:	ec f3       	brlt	.-6      	; 0x1db4 <__mulsf3_pse+0x82>
    1dba:	98 3e       	cpi	r25, 0xE8	; 232
    1dbc:	dc f3       	brlt	.-10     	; 0x1db4 <__mulsf3_pse+0x82>
    1dbe:	86 95       	lsr	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	b7 95       	ror	r27
    1dc6:	f7 95       	ror	r31
    1dc8:	e7 95       	ror	r30
    1dca:	9f 5f       	subi	r25, 0xFF	; 255
    1dcc:	c1 f7       	brne	.-16     	; 0x1dbe <__mulsf3_pse+0x8c>
    1dce:	fe 2b       	or	r31, r30
    1dd0:	88 0f       	add	r24, r24
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <pow>:
    1ddc:	fa 01       	movw	r30, r20
    1dde:	ee 0f       	add	r30, r30
    1de0:	ff 1f       	adc	r31, r31
    1de2:	30 96       	adiw	r30, 0x00	; 0
    1de4:	21 05       	cpc	r18, r1
    1de6:	31 05       	cpc	r19, r1
    1de8:	99 f1       	breq	.+102    	; 0x1e50 <pow+0x74>
    1dea:	61 15       	cp	r22, r1
    1dec:	71 05       	cpc	r23, r1
    1dee:	61 f4       	brne	.+24     	; 0x1e08 <pow+0x2c>
    1df0:	80 38       	cpi	r24, 0x80	; 128
    1df2:	bf e3       	ldi	r27, 0x3F	; 63
    1df4:	9b 07       	cpc	r25, r27
    1df6:	49 f1       	breq	.+82     	; 0x1e4a <pow+0x6e>
    1df8:	68 94       	set
    1dfa:	90 38       	cpi	r25, 0x80	; 128
    1dfc:	81 05       	cpc	r24, r1
    1dfe:	61 f0       	breq	.+24     	; 0x1e18 <pow+0x3c>
    1e00:	80 38       	cpi	r24, 0x80	; 128
    1e02:	bf ef       	ldi	r27, 0xFF	; 255
    1e04:	9b 07       	cpc	r25, r27
    1e06:	41 f0       	breq	.+16     	; 0x1e18 <pow+0x3c>
    1e08:	99 23       	and	r25, r25
    1e0a:	42 f5       	brpl	.+80     	; 0x1e5c <pow+0x80>
    1e0c:	ff 3f       	cpi	r31, 0xFF	; 255
    1e0e:	e1 05       	cpc	r30, r1
    1e10:	31 05       	cpc	r19, r1
    1e12:	21 05       	cpc	r18, r1
    1e14:	11 f1       	breq	.+68     	; 0x1e5a <pow+0x7e>
    1e16:	e8 94       	clt
    1e18:	08 94       	sec
    1e1a:	e7 95       	ror	r30
    1e1c:	d9 01       	movw	r26, r18
    1e1e:	aa 23       	and	r26, r26
    1e20:	29 f4       	brne	.+10     	; 0x1e2c <pow+0x50>
    1e22:	ab 2f       	mov	r26, r27
    1e24:	be 2f       	mov	r27, r30
    1e26:	f8 5f       	subi	r31, 0xF8	; 248
    1e28:	d0 f3       	brcs	.-12     	; 0x1e1e <pow+0x42>
    1e2a:	10 c0       	rjmp	.+32     	; 0x1e4c <pow+0x70>
    1e2c:	ff 5f       	subi	r31, 0xFF	; 255
    1e2e:	70 f4       	brcc	.+28     	; 0x1e4c <pow+0x70>
    1e30:	a6 95       	lsr	r26
    1e32:	e0 f7       	brcc	.-8      	; 0x1e2c <pow+0x50>
    1e34:	f7 39       	cpi	r31, 0x97	; 151
    1e36:	50 f0       	brcs	.+20     	; 0x1e4c <pow+0x70>
    1e38:	19 f0       	breq	.+6      	; 0x1e40 <pow+0x64>
    1e3a:	ff 3a       	cpi	r31, 0xAF	; 175
    1e3c:	38 f4       	brcc	.+14     	; 0x1e4c <pow+0x70>
    1e3e:	9f 77       	andi	r25, 0x7F	; 127
    1e40:	9f 93       	push	r25
    1e42:	0c d0       	rcall	.+24     	; 0x1e5c <pow+0x80>
    1e44:	0f 90       	pop	r0
    1e46:	07 fc       	sbrc	r0, 7
    1e48:	90 58       	subi	r25, 0x80	; 128
    1e4a:	08 95       	ret
    1e4c:	3e f0       	brts	.+14     	; 0x1e5c <pow+0x80>
    1e4e:	18 cf       	rjmp	.-464    	; 0x1c80 <__fp_nan>
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	80 e8       	ldi	r24, 0x80	; 128
    1e56:	9f e3       	ldi	r25, 0x3F	; 63
    1e58:	08 95       	ret
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	9f 77       	andi	r25, 0x7F	; 127
    1e5e:	5f 93       	push	r21
    1e60:	4f 93       	push	r20
    1e62:	3f 93       	push	r19
    1e64:	2f 93       	push	r18
    1e66:	9e d0       	rcall	.+316    	; 0x1fa4 <log>
    1e68:	2f 91       	pop	r18
    1e6a:	3f 91       	pop	r19
    1e6c:	4f 91       	pop	r20
    1e6e:	5f 91       	pop	r21
    1e70:	52 df       	rcall	.-348    	; 0x1d16 <__mulsf3>
    1e72:	05 c0       	rjmp	.+10     	; 0x1e7e <exp>
    1e74:	19 f4       	brne	.+6      	; 0x1e7c <pow+0xa0>
    1e76:	0e f0       	brts	.+2      	; 0x1e7a <pow+0x9e>
    1e78:	fd ce       	rjmp	.-518    	; 0x1c74 <__fp_inf>
    1e7a:	46 cf       	rjmp	.-372    	; 0x1d08 <__fp_zero>
    1e7c:	01 cf       	rjmp	.-510    	; 0x1c80 <__fp_nan>

00001e7e <exp>:
    1e7e:	2a df       	rcall	.-428    	; 0x1cd4 <__fp_splitA>
    1e80:	c8 f3       	brcs	.-14     	; 0x1e74 <pow+0x98>
    1e82:	96 38       	cpi	r25, 0x86	; 134
    1e84:	c0 f7       	brcc	.-16     	; 0x1e76 <pow+0x9a>
    1e86:	07 f8       	bld	r0, 7
    1e88:	0f 92       	push	r0
    1e8a:	e8 94       	clt
    1e8c:	2b e3       	ldi	r18, 0x3B	; 59
    1e8e:	3a ea       	ldi	r19, 0xAA	; 170
    1e90:	48 eb       	ldi	r20, 0xB8	; 184
    1e92:	5f e7       	ldi	r21, 0x7F	; 127
    1e94:	4e df       	rcall	.-356    	; 0x1d32 <__mulsf3_pse>
    1e96:	0f 92       	push	r0
    1e98:	0f 92       	push	r0
    1e9a:	0f 92       	push	r0
    1e9c:	4d b7       	in	r20, 0x3d	; 61
    1e9e:	5e b7       	in	r21, 0x3e	; 62
    1ea0:	0f 92       	push	r0
    1ea2:	c0 d0       	rcall	.+384    	; 0x2024 <modf>
    1ea4:	e4 ee       	ldi	r30, 0xE4	; 228
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	16 d0       	rcall	.+44     	; 0x1ed6 <__fp_powser>
    1eaa:	4f 91       	pop	r20
    1eac:	5f 91       	pop	r21
    1eae:	ef 91       	pop	r30
    1eb0:	ff 91       	pop	r31
    1eb2:	e5 95       	asr	r30
    1eb4:	ee 1f       	adc	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	49 f0       	breq	.+18     	; 0x1ecc <exp+0x4e>
    1eba:	fe 57       	subi	r31, 0x7E	; 126
    1ebc:	e0 68       	ori	r30, 0x80	; 128
    1ebe:	44 27       	eor	r20, r20
    1ec0:	ee 0f       	add	r30, r30
    1ec2:	44 1f       	adc	r20, r20
    1ec4:	fa 95       	dec	r31
    1ec6:	e1 f7       	brne	.-8      	; 0x1ec0 <exp+0x42>
    1ec8:	41 95       	neg	r20
    1eca:	55 0b       	sbc	r21, r21
    1ecc:	32 d0       	rcall	.+100    	; 0x1f32 <ldexp>
    1ece:	0f 90       	pop	r0
    1ed0:	07 fe       	sbrs	r0, 7
    1ed2:	26 c0       	rjmp	.+76     	; 0x1f20 <inverse>
    1ed4:	08 95       	ret

00001ed6 <__fp_powser>:
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	1f 93       	push	r17
    1edc:	0f 93       	push	r16
    1ede:	ff 92       	push	r15
    1ee0:	ef 92       	push	r14
    1ee2:	df 92       	push	r13
    1ee4:	7b 01       	movw	r14, r22
    1ee6:	8c 01       	movw	r16, r24
    1ee8:	68 94       	set
    1eea:	05 c0       	rjmp	.+10     	; 0x1ef6 <__fp_powser+0x20>
    1eec:	da 2e       	mov	r13, r26
    1eee:	ef 01       	movw	r28, r30
    1ef0:	1e df       	rcall	.-452    	; 0x1d2e <__mulsf3x>
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e8 94       	clt
    1ef6:	a5 91       	lpm	r26, Z+
    1ef8:	25 91       	lpm	r18, Z+
    1efa:	35 91       	lpm	r19, Z+
    1efc:	45 91       	lpm	r20, Z+
    1efe:	55 91       	lpm	r21, Z+
    1f00:	ae f3       	brts	.-22     	; 0x1eec <__fp_powser+0x16>
    1f02:	ef 01       	movw	r28, r30
    1f04:	8e dd       	rcall	.-1252   	; 0x1a22 <__addsf3x>
    1f06:	fe 01       	movw	r30, r28
    1f08:	97 01       	movw	r18, r14
    1f0a:	a8 01       	movw	r20, r16
    1f0c:	da 94       	dec	r13
    1f0e:	79 f7       	brne	.-34     	; 0x1eee <__fp_powser+0x18>
    1f10:	df 90       	pop	r13
    1f12:	ef 90       	pop	r14
    1f14:	ff 90       	pop	r15
    1f16:	0f 91       	pop	r16
    1f18:	1f 91       	pop	r17
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <inverse>:
    1f20:	9b 01       	movw	r18, r22
    1f22:	ac 01       	movw	r20, r24
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	80 e8       	ldi	r24, 0x80	; 128
    1f2a:	9f e3       	ldi	r25, 0x3F	; 63
    1f2c:	cd cd       	rjmp	.-1126   	; 0x1ac8 <__divsf3>
    1f2e:	a2 ce       	rjmp	.-700    	; 0x1c74 <__fp_inf>
    1f30:	ac c0       	rjmp	.+344    	; 0x208a <__fp_mpack>

00001f32 <ldexp>:
    1f32:	d0 de       	rcall	.-608    	; 0x1cd4 <__fp_splitA>
    1f34:	e8 f3       	brcs	.-6      	; 0x1f30 <inverse+0x10>
    1f36:	99 23       	and	r25, r25
    1f38:	d9 f3       	breq	.-10     	; 0x1f30 <inverse+0x10>
    1f3a:	94 0f       	add	r25, r20
    1f3c:	51 1d       	adc	r21, r1
    1f3e:	bb f3       	brvs	.-18     	; 0x1f2e <inverse+0xe>
    1f40:	91 50       	subi	r25, 0x01	; 1
    1f42:	50 40       	sbci	r21, 0x00	; 0
    1f44:	94 f0       	brlt	.+36     	; 0x1f6a <ldexp+0x38>
    1f46:	59 f0       	breq	.+22     	; 0x1f5e <ldexp+0x2c>
    1f48:	88 23       	and	r24, r24
    1f4a:	32 f0       	brmi	.+12     	; 0x1f58 <ldexp+0x26>
    1f4c:	66 0f       	add	r22, r22
    1f4e:	77 1f       	adc	r23, r23
    1f50:	88 1f       	adc	r24, r24
    1f52:	91 50       	subi	r25, 0x01	; 1
    1f54:	50 40       	sbci	r21, 0x00	; 0
    1f56:	c1 f7       	brne	.-16     	; 0x1f48 <ldexp+0x16>
    1f58:	9e 3f       	cpi	r25, 0xFE	; 254
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	44 f7       	brge	.-48     	; 0x1f2e <inverse+0xe>
    1f5e:	88 0f       	add	r24, r24
    1f60:	91 1d       	adc	r25, r1
    1f62:	96 95       	lsr	r25
    1f64:	87 95       	ror	r24
    1f66:	97 f9       	bld	r25, 7
    1f68:	08 95       	ret
    1f6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f6c:	ac f0       	brlt	.+42     	; 0x1f98 <ldexp+0x66>
    1f6e:	98 3e       	cpi	r25, 0xE8	; 232
    1f70:	9c f0       	brlt	.+38     	; 0x1f98 <ldexp+0x66>
    1f72:	bb 27       	eor	r27, r27
    1f74:	86 95       	lsr	r24
    1f76:	77 95       	ror	r23
    1f78:	67 95       	ror	r22
    1f7a:	b7 95       	ror	r27
    1f7c:	08 f4       	brcc	.+2      	; 0x1f80 <ldexp+0x4e>
    1f7e:	b1 60       	ori	r27, 0x01	; 1
    1f80:	93 95       	inc	r25
    1f82:	c1 f7       	brne	.-16     	; 0x1f74 <ldexp+0x42>
    1f84:	bb 0f       	add	r27, r27
    1f86:	58 f7       	brcc	.-42     	; 0x1f5e <ldexp+0x2c>
    1f88:	11 f4       	brne	.+4      	; 0x1f8e <ldexp+0x5c>
    1f8a:	60 ff       	sbrs	r22, 0
    1f8c:	e8 cf       	rjmp	.-48     	; 0x1f5e <ldexp+0x2c>
    1f8e:	6f 5f       	subi	r22, 0xFF	; 255
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	8f 4f       	sbci	r24, 0xFF	; 255
    1f94:	9f 4f       	sbci	r25, 0xFF	; 255
    1f96:	e3 cf       	rjmp	.-58     	; 0x1f5e <ldexp+0x2c>
    1f98:	b8 ce       	rjmp	.-656    	; 0x1d0a <__fp_szero>
    1f9a:	0e f0       	brts	.+2      	; 0x1f9e <ldexp+0x6c>
    1f9c:	76 c0       	rjmp	.+236    	; 0x208a <__fp_mpack>
    1f9e:	70 ce       	rjmp	.-800    	; 0x1c80 <__fp_nan>
    1fa0:	68 94       	set
    1fa2:	68 ce       	rjmp	.-816    	; 0x1c74 <__fp_inf>

00001fa4 <log>:
    1fa4:	97 de       	rcall	.-722    	; 0x1cd4 <__fp_splitA>
    1fa6:	c8 f3       	brcs	.-14     	; 0x1f9a <ldexp+0x68>
    1fa8:	99 23       	and	r25, r25
    1faa:	d1 f3       	breq	.-12     	; 0x1fa0 <ldexp+0x6e>
    1fac:	c6 f3       	brts	.-16     	; 0x1f9e <ldexp+0x6c>
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	1f 93       	push	r17
    1fb4:	0f 93       	push	r16
    1fb6:	ff 92       	push	r15
    1fb8:	c9 2f       	mov	r28, r25
    1fba:	dd 27       	eor	r29, r29
    1fbc:	88 23       	and	r24, r24
    1fbe:	2a f0       	brmi	.+10     	; 0x1fca <log+0x26>
    1fc0:	21 97       	sbiw	r28, 0x01	; 1
    1fc2:	66 0f       	add	r22, r22
    1fc4:	77 1f       	adc	r23, r23
    1fc6:	88 1f       	adc	r24, r24
    1fc8:	da f7       	brpl	.-10     	; 0x1fc0 <log+0x1c>
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e8       	ldi	r20, 0x80	; 128
    1fd0:	5f eb       	ldi	r21, 0xBF	; 191
    1fd2:	9f e3       	ldi	r25, 0x3F	; 63
    1fd4:	88 39       	cpi	r24, 0x98	; 152
    1fd6:	20 f0       	brcs	.+8      	; 0x1fe0 <log+0x3c>
    1fd8:	80 3e       	cpi	r24, 0xE0	; 224
    1fda:	30 f0       	brcs	.+12     	; 0x1fe8 <log+0x44>
    1fdc:	21 96       	adiw	r28, 0x01	; 1
    1fde:	8f 77       	andi	r24, 0x7F	; 127
    1fe0:	0f dd       	rcall	.-1506   	; 0x1a00 <__addsf3>
    1fe2:	ec e0       	ldi	r30, 0x0C	; 12
    1fe4:	f1 e0       	ldi	r31, 0x01	; 1
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <log+0x4a>
    1fe8:	0b dd       	rcall	.-1514   	; 0x1a00 <__addsf3>
    1fea:	e9 e3       	ldi	r30, 0x39	; 57
    1fec:	f1 e0       	ldi	r31, 0x01	; 1
    1fee:	73 df       	rcall	.-282    	; 0x1ed6 <__fp_powser>
    1ff0:	8b 01       	movw	r16, r22
    1ff2:	be 01       	movw	r22, r28
    1ff4:	ec 01       	movw	r28, r24
    1ff6:	fb 2e       	mov	r15, r27
    1ff8:	6f 57       	subi	r22, 0x7F	; 127
    1ffa:	71 09       	sbc	r23, r1
    1ffc:	75 95       	asr	r23
    1ffe:	77 1f       	adc	r23, r23
    2000:	88 0b       	sbc	r24, r24
    2002:	99 0b       	sbc	r25, r25
    2004:	fc dd       	rcall	.-1032   	; 0x1bfe <__floatsisf>
    2006:	28 e1       	ldi	r18, 0x18	; 24
    2008:	32 e7       	ldi	r19, 0x72	; 114
    200a:	41 e3       	ldi	r20, 0x31	; 49
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	8f de       	rcall	.-738    	; 0x1d2e <__mulsf3x>
    2010:	af 2d       	mov	r26, r15
    2012:	98 01       	movw	r18, r16
    2014:	ae 01       	movw	r20, r28
    2016:	ff 90       	pop	r15
    2018:	0f 91       	pop	r16
    201a:	1f 91       	pop	r17
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	00 dd       	rcall	.-1536   	; 0x1a22 <__addsf3x>
    2022:	3f ce       	rjmp	.-898    	; 0x1ca2 <__fp_round>

00002024 <modf>:
    2024:	fa 01       	movw	r30, r20
    2026:	dc 01       	movw	r26, r24
    2028:	aa 0f       	add	r26, r26
    202a:	bb 1f       	adc	r27, r27
    202c:	9b 01       	movw	r18, r22
    202e:	ac 01       	movw	r20, r24
    2030:	bf 57       	subi	r27, 0x7F	; 127
    2032:	28 f4       	brcc	.+10     	; 0x203e <modf+0x1a>
    2034:	22 27       	eor	r18, r18
    2036:	33 27       	eor	r19, r19
    2038:	44 27       	eor	r20, r20
    203a:	50 78       	andi	r21, 0x80	; 128
    203c:	1f c0       	rjmp	.+62     	; 0x207c <modf+0x58>
    203e:	b7 51       	subi	r27, 0x17	; 23
    2040:	88 f4       	brcc	.+34     	; 0x2064 <modf+0x40>
    2042:	ab 2f       	mov	r26, r27
    2044:	00 24       	eor	r0, r0
    2046:	46 95       	lsr	r20
    2048:	37 95       	ror	r19
    204a:	27 95       	ror	r18
    204c:	01 1c       	adc	r0, r1
    204e:	a3 95       	inc	r26
    2050:	d2 f3       	brmi	.-12     	; 0x2046 <modf+0x22>
    2052:	00 20       	and	r0, r0
    2054:	69 f0       	breq	.+26     	; 0x2070 <modf+0x4c>
    2056:	22 0f       	add	r18, r18
    2058:	33 1f       	adc	r19, r19
    205a:	44 1f       	adc	r20, r20
    205c:	b3 95       	inc	r27
    205e:	da f3       	brmi	.-10     	; 0x2056 <modf+0x32>
    2060:	0d d0       	rcall	.+26     	; 0x207c <modf+0x58>
    2062:	cd cc       	rjmp	.-1638   	; 0x19fe <__subsf3>
    2064:	61 30       	cpi	r22, 0x01	; 1
    2066:	71 05       	cpc	r23, r1
    2068:	a0 e8       	ldi	r26, 0x80	; 128
    206a:	8a 07       	cpc	r24, r26
    206c:	b9 46       	sbci	r27, 0x69	; 105
    206e:	30 f4       	brcc	.+12     	; 0x207c <modf+0x58>
    2070:	9b 01       	movw	r18, r22
    2072:	ac 01       	movw	r20, r24
    2074:	66 27       	eor	r22, r22
    2076:	77 27       	eor	r23, r23
    2078:	88 27       	eor	r24, r24
    207a:	90 78       	andi	r25, 0x80	; 128
    207c:	30 96       	adiw	r30, 0x00	; 0
    207e:	21 f0       	breq	.+8      	; 0x2088 <modf+0x64>
    2080:	20 83       	st	Z, r18
    2082:	31 83       	std	Z+1, r19	; 0x01
    2084:	42 83       	std	Z+2, r20	; 0x02
    2086:	53 83       	std	Z+3, r21	; 0x03
    2088:	08 95       	ret

0000208a <__fp_mpack>:
    208a:	9f 3f       	cpi	r25, 0xFF	; 255
    208c:	31 f0       	breq	.+12     	; 0x209a <__fp_mpack_finite+0xc>

0000208e <__fp_mpack_finite>:
    208e:	91 50       	subi	r25, 0x01	; 1
    2090:	20 f4       	brcc	.+8      	; 0x209a <__fp_mpack_finite+0xc>
    2092:	87 95       	ror	r24
    2094:	77 95       	ror	r23
    2096:	67 95       	ror	r22
    2098:	b7 95       	ror	r27
    209a:	88 0f       	add	r24, r24
    209c:	91 1d       	adc	r25, r1
    209e:	96 95       	lsr	r25
    20a0:	87 95       	ror	r24
    20a2:	97 f9       	bld	r25, 7
    20a4:	08 95       	ret

000020a6 <__udivmodhi4>:
    20a6:	aa 1b       	sub	r26, r26
    20a8:	bb 1b       	sub	r27, r27
    20aa:	51 e1       	ldi	r21, 0x11	; 17
    20ac:	07 c0       	rjmp	.+14     	; 0x20bc <__udivmodhi4_ep>

000020ae <__udivmodhi4_loop>:
    20ae:	aa 1f       	adc	r26, r26
    20b0:	bb 1f       	adc	r27, r27
    20b2:	a6 17       	cp	r26, r22
    20b4:	b7 07       	cpc	r27, r23
    20b6:	10 f0       	brcs	.+4      	; 0x20bc <__udivmodhi4_ep>
    20b8:	a6 1b       	sub	r26, r22
    20ba:	b7 0b       	sbc	r27, r23

000020bc <__udivmodhi4_ep>:
    20bc:	88 1f       	adc	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	5a 95       	dec	r21
    20c2:	a9 f7       	brne	.-22     	; 0x20ae <__udivmodhi4_loop>
    20c4:	80 95       	com	r24
    20c6:	90 95       	com	r25
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	08 95       	ret

000020ce <_exit>:
    20ce:	f8 94       	cli

000020d0 <__stop_program>:
    20d0:	ff cf       	rjmp	.-2      	; 0x20d0 <__stop_program>
